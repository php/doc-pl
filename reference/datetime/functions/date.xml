<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: 95bdd6883b5dde9504701777ba81b3c5f15df52b Maintainer: sobak Status: ready -->
<!-- $Revision$ -->
<!-- CREDITS: garbus, qrak -->
<refentry xml:id="function.date" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>date</refname>
  <refpurpose>Formatuje znacznik czasu Uniksa</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>date</methodname>
   <methodparam><type>string</type><parameter>format</parameter></methodparam>
   <methodparam choice="opt"><type class="union"><type>int</type><type>null</type></type><parameter>timestamp</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para>
   Zwraca datę sformatowaną zgodnie z szablonem podanym w argumencie
   jako <parameter>timestamp</parameter>, lub aktualnego czasu
   w przypadku wywołania jej bez tego argumentu. Innymi słowy, <parameter>timestamp</parameter>
   jest parametrem opcjonalnym, domyślnie pobierającym wartość funkcji <function>time</function>.
  </para>
  <warning>
   <para>
    Uniksowy znacznik czasu nie obsługuje stref czasowych. Skorzystaj z
    klasy <classname>DateTimeImmutable</classname>i jej metody
    <methodname>DateTimeInterface::format</methodname> aby
    sformatować datę/czas z uwzględnieniem informacji o strefie czasowej.
   </para>
  </warning>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>format</parameter></term>
    <listitem>
     <para>
      Format przyjmowany przez <methodname>DateTimeInterface::format</methodname>.
     </para>
     <note>
      <para>
       <function>date</function> zawsze zwróci
       <literal>000000</literal> jako mikrosekundy, ponieważ przyjmuje typ <type>int</type>,
       podczas gdy <methodname>DateTime::format</methodname> wspiera obsługę milisekund
       jeżeli obiekt klasy <classname>DateTime</classname> został utworzony z milisekundami.
      </para>
     </note>
    </listitem>
   </varlistentry>

   &date.timestamp.description;

   </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Zwraca sformatowaną datę jako ciąg znaków.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
   
   &date.timezone.errors.description;
 
 </refsect1>
       
 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>8.0.0</entry>
       <entry>
        Parametr <parameter>timestamp</parameter> ma teraz domyślną wartość null.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Przykłady użycia funkcji <function>date</function></title>
    <programlisting role="php">
<![CDATA[
<?php
// ustawia domyślnie używaną strefę czasową.
date_default_timezone_set('UTC');

// wypisuje np.: Monday
echo date("l");

// wypisuje coś jak: Monday 8th August 2005 03:12:46 PM
echo date('l jS F Y h:i:s A');

// wypisuje: 1 lipca, 2000 wypada w Saturday
echo "1 lipca, 2000 wypada w " . date("l", mktime(0, 0, 0, 7, 1, 2000));

/* użycie stałych jako parametru format */
// wypisuje coś jak: Wed, 25 Sep 2013 15:28:57 -0700
echo date(DATE_RFC2822);

// wypisuje coś jak: 2000-07-01T00:00:00+00:00
echo date(DATE_ATOM, mktime(0, 0, 0, 7, 1, 2000));
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   Możesz ochronić rozpoznawalne znaki w łańcuchu formatującym przed
   zinterpretowaniem przez poprzedzenie ich znakiem ucieczki - backslashem. Jeśli znak
   razem z backslashem jest specjalną sekwencją, możliwe, iż będzie trzeba poprzedzić kolejnym 
   znakiem ucieczki całą sekwencję.
   <example>
    <title>Znaki ucieczki w funkcji <function>date</function></title>
    <programlisting role="php">
<![CDATA[
<?php
// wypisuje coś jak: jest Wednesday, 15th
echo date("\j\e\s\t l, jS");
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   Możliwe jest użycie funkcji <function>date</function> razem z funkcją
   <function>mktime</function> w celu znalezienia dat z przeszłości
   lub przyszłości.
   <example>
    <title>Przykład użycia <function>date</function> i <function>mktime</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$jutro = mktime(0, 0, 0, date("m")  , date("d")+1, date("Y"));
$ostatni_miesiac = mktime(0, 0, 0, date("m")-1, date("d"),   date("Y"));
$nastepny_rok  = mktime(0, 0, 0, date("m"),   date("d"),   date("Y")+1);
?>
]]>
    </programlisting>
   </example>
   <note>
    <para>
     Rozwiązanie to jest rozsądniejsze, od prostego dodawania lub odejmowania określonej liczby
     sekund w dniu lub miesiącu, chociażby z powodu zmian
     czasu.
    </para>
   </note>
  </para>
  <para>
   Poniżej znajduje się kilka przykładów zastosowania
   <function>date</function>. Proszę zwrócić uwagę, że powinno się cytować
   wszystkie znaki aby uniknąć nieoczekiwanych rezultatów, a poza tym, nawet
   te znaki, które obecnie nie mają specjalnych znaczeń, mogą mieć przypisane jakieś
   znaczenie w przyszłych wersjach PHP. O ile to możliwe, należy używać
   cudzysłowów pojedynczych, żeby uniknąć np. zamiany \n na znak nowej linii.
   <example>
    <title>zastosowania <function>date</function></title>
    <programlisting role="php">
<![CDATA[
<?php
// Przypuśćmy, że dziś jest 10 marca, 2001, 5:16:18 pm, oraz, że jesteśmy w
// strefie czasowej MST (Mountain Standard Time)

$dzisiaj = date("F j, Y, g:i a");                 // March 10, 2001, 5:16 pm
$dzisiaj = date("m.d.y");                         // 03.10.01
$dzisiaj = date("j, n, Y");                       // 10, 3, 2001
$dzisiaj = date("Ymd");                           // 20010310
$dzisiaj = date('h-i-s, j-m-y, it is w Day z ');  // 05-16-18, 10-03-01, 1631 1618 6 Satpm01
$dzisiaj = date('\t\o jS \d\z\i\e\ń');            // to 10. dzień
$dzisiaj = date("D M j G:i:s T Y");               // Sat Mar 10 17:16:18 MST 2001
$dzisiaj = date('H:m:s \m \t\o\ \m\i\e\s\i\ą\c'); // 17:03:18 m to miesiąc
$dzisiaj = date("H:i:s");                         // 17:16:18
$dzisiaj = date("Y-m-d H:i:s");                   // 2001-03-10 17:16:18 (format MySQL DATETIME)
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   Aby sformatować datę w innych językach można użyć
   <methodname>IntlDateFormatter::format</methodname>
   zamiast <function>date</function>.
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>     
   <para>
    Aby stworzyć znacznik czasu z tekstowego opisu daty, możesz
    użyć <function>strtotime</function>. Dodatkowo, niektóre
    bazy danych mają funkcje konwertujące ich format daty na znacznik czasu
    (tak jak funkcja <link xlink:href="&url.mysql.docs.date;">UNIX_TIMESTAMP</link>
    w MySQL).
   </para>
  </note>
  <tip>
   <para>
    Znacznik czasu z chwili wysłania zapytania jest dostępny
    w <varname>$_SERVER['REQUEST_TIME']</varname>..
   </para>
  </tip>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>DateTimeImmutable::__construct</methodname></member>
    <member><methodname>DateTimeInterface::format</methodname></member>
    <member><function>gmdate</function></member>
    <member><function>idate</function></member>
    <member><function>getdate</function></member>
    <member><function>getlastmod</function></member>
    <member><function>mktime</function></member>
    <member><methodname>IntlDateFormatter::format</methodname></member>
    <member><function>time</function></member>
    <member><link linkend="datetimeinterface.constants.types">Predefiniowane stałe daty i czasu</link></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
