<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: b978dba78bbf97feddd5d30f2d5b13eeb4c77ea2 Maintainer: sobak Status: ready -->
<!-- $Revision$ -->

<refentry xml:id="function.password-hash" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>password_hash</refname>
  <refpurpose>Tworzy hash hasła</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>password_hash</methodname>
   <methodparam><type>string</type><parameter>hasło</parameter></methodparam>
   <methodparam><type>integer</type><parameter>algorytm</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>opcje</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>password_hash</function> tworzy hash hasła używając silnego, jednokierunkowego
   algorytmu. <function>password_hash</function> jest kompatybilny z <function>crypt</function>.
   Dzięki temu hashe utworzone przez <function>crypt</function> mogą być użyte z
   <function>password_hash</function>.
  </para>
  <simpara>
   Następujące algorytmy są obecnie wspierane:
  </simpara>
  <para>
   <itemizedlist>
    <listitem>
     <simpara>
      <constant>PASSWORD_DEFAULT</constant> - Używa algorytmu bcrypt (domyślny od PHP 5.5.0).
      Zwróć uwagę, że ta stała jest zaprojektowana, aby być zmieniona po czasie, gdy pojawią się
      nowe, silniejsze algorytmy. Z tego powodu długość wyjścia przy użyciu tej stałej może zmienić
      się z czasem. Dlatego jest zalecane, aby trzymać wynik w kolumnie bazy danych, która może
      pomieścić więcej niż 60 znaków (255 znaków powinno być dobrym wyborem).
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <constant>PASSWORD_BCRYPT</constant> - Używa algorytmu <constant>CRYPT_BLOWFISH</constant> do
      stworzenia hasha. To ustawienie zwróci hash kompatybilny z <function>crypt</function> używając
      identyfikatora "$2y$". Rezultatem tej funkcji będzie zawsze 60-znakowy ciąg, &return.falseforfailure;.
     </simpara>
     <para>
      Wspierane opcje
     </para>
     <itemizedlist>
      <listitem>
       <para>
        <literal>salt</literal> - pozwala na ręczne podanie soli przy generowaniu hasła.
        Zwróć uwagę, że to ustawienie zapobiegnie automatycznemu wygenerowaniu soli.
       </para>
       <para>
        Jeżeli pomięto, losowa sól zostanie wygenerowa przez <function>password_hash</function>
        dla każdego hasła. Jest to zalecany tryb postępowania.
       </para>
      </listitem>
      <listitem>
       <para>
        <literal>cost</literal> - oznacza koszt algorytmu, który może zostać użyty. 
        Przykładowe wartości można znaleźć na stronie funkcji <function>crypt</function>.
       </para>
       <para>
        Domyślną wartością jest <literal>10</literal>. Stanowi ona optymalny balans pomiędzy
        siłą hashowania i czasem, ale możesz rozważyć jej zwiększenie, zależnie od sprzętu,
        którym dysponujesz.
       </para>
      </listitem>
     </itemizedlist>
    </listitem>
   </itemizedlist>
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>hasło</parameter></term>
    <listitem>
     <para>
      &password.parameter.password;
     </para>
      <caution>
       <para>
        Użycie stałej <constant>PASSWORD_BCRYPT</constant> dla parametru
        <parameter>algorytm</parameter> spowoduje, że parametr <parameter>algo
        </parameter> zostanie obcięty do maksymalnie 72 znaków. 
       </para>
      </caution>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>algorytm</parameter></term>
    <listitem>
     <para>
      &password.parameter.algo;
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>options</parameter></term>
    <listitem>
     <para>
      &password.parameter.options;
     </para>
     <para>
      Jeżeli pominięte, zostanie wygenerowana losowa sól i zostanie użyty
      domyślny koszt.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Zwraca zahashowane hasło &return.falseforfailure;.
  </para>
  <para>
   Użyty algorytm, koszt oraz sól są zwracane jako część hasha. Dzięki temu
   wszystkie informacje potrzebne do zweryfikowania hasha są zawarte w nim samym.
   Pozwala to na użycie funkcji <function>password_verify</function> bez konieczności
   trzymania soli lub informacji o algorytmie osobno.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Przykład użycia <function>password_hash</function></title>
    <programlisting role="php">
<![CDATA[
<?php
/**
 * Chcemy po prostu hahashować nasze hasło przy użyciu domyślnego algorytmu
 * Obecnie jest to BCRYPT i zwróci 60-znakowy hash.
 *
 * Pamiętaj że domyślny algorytm może z czasem ulec zmianie, więc przygotuj się
 * zwiększając ilość znaków w bazie danych na więcej niż 60 (255 będzie dobrym wyborem)
 */
echo password_hash("rasmuslerdorf", PASSWORD_DEFAULT)."\n";
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
$2y$10$.vGA1O9wmRjrwAVXD98HNOgsNpDczlqm3Jq7KnEd1rVAGv3Fykk1a
]]>
    </screen>
   </example>
  </para> 
  <para>
   <example>
    <title>Ręczne ustawianie kosztu</title>
    <programlisting role="php">
<![CDATA[
<?php
/**
 * W tym wypadku chcemy zwiększyć domyślny koszt dla BCRYPT do 12.
 * Zauważ także, że przełączyliśmy się na BCRYPT, który zawsze zwróci
 * 60 znaków
 */
$options = [
    'cost' => 12,
];
echo password_hash("rasmuslerdorf", PASSWORD_BCRYPT, $options)."\n";
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
$2y$12$QjSH496pcT5CEbzjD/vtVeH03tfHKFy36d4J0Ltp3lRtee9HDxY3K
]]>
    </screen>
   </example>
  </para>
  
  <para>
   <example>
    <title>Ręczne ustawianie soli</title>
    <programlisting role="php">
<![CDATA[
<?php
/**
 * Zauważ, że sól tutaj jest generowana losowo.
 * Nigdy nie używaj soli statycznej lub takiej, która nie jest generowana losowo
 *
 * W większości wypadków zalecane jest zostawienie generowania soli funkcji password_hash
 */
$options = [
    'cost' => 11,
    'salt' => mcrypt_create_iv(22, MCRYPT_DEV_URANDOM),
];
echo password_hash("rasmuslerdorf", PASSWORD_BCRYPT, $options)."\n";
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
$2y$11$q5MkhSBtlsJcNEVsYh64a.aCluzHnGog7TQAKVmQwO9C8xb.t89F.
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Znajdowanie optymalnego kosztu</title>
    <programlisting role="php">
<![CDATA[
<?php
/**
 * Ten kod przetestuje Twój serwer, aby ustalić na jak duży koszt możesz sobie
 * pozwolić. Najlepszy koszt to najwyższy na który możesz sobie pozwolić bez
 * zbyt dużego zwalniania Twojego serwera. 10 jest dobrym punktem wyjścia.
 */
$timeTarget = 0.2; 

$cost = 9;
do {
    $cost++;
    $start = microtime(true);
    password_hash("test", PASSWORD_BCRYPT, ["cost" => $cost]);
    $end = microtime(true);
} while (($end - $start) < $timeTarget);

echo "Zalecany koszt znaleziony: " . $cost . "\n";
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
Zalecany koszt znaleziony: 11
]]>
    </screen>
   </example>
  </para>
 </refsect1>
 
 <refsect1 role="notes">
  &reftitle.notes;
  <caution>
   <para>
    Jest wysoce zalecane, aby nie generować soli dla tej funkcji samodzielnie.
    Sól zostanie dla Ciebie stworzona automatycznie, jeżeli nie podasz żadnej.
   </para>
  </caution>
  <note>
   <para>
    Jest zalecane aby przetestować tę funkcję na swoim serwerze i dostosować koszt, tak aby
    wykonanie funkcji zajmowało około 0,1 do 0,5 sekundy. Skrypt powyżej pozwoli Ci wybrać
    odpowiednią wartość dla Twojego sprzętu.
   </para>
  </note>
  <note>
   <simpara>
    Aktualizacje algorytmów dla tej funkcji (lub zmiana domyślnego) muszą odbywać się według
    następujących zasad:
   </simpara>
   <para>
    <itemizedlist>
     <listitem>
      <simpara>Algorytm musi być obecny w rdzeniu PHP przynajmniej od jednego pełnego wydania, aby
       stać się domyślnym. Więc jeżeli przykładowo nowy algorytm został dodany w wersji 5.5.5,
       nie powinien być domyślnym do wersji 5.7 (wersja 5.6 stanowi pierwsze pełne wydanie). Jeżeli jednak
       inny algorytm został dodany w 5.6.0 będzie mógł zostać domyślnym od wersji 5.7.0.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Domyślny algorytm powinien zmieniać się jedynie w pełnych wydaniach (5.6.0, 6.0.0 itd).
       Jedynym wyjątkiem od tej reguły jest sytuacja, gdy zostanie znaleziona krytyczna luka
       bezpieczeństwa w obecnym algorytmie.
      </simpara>
     </listitem>
    </itemizedlist>
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>password_verify</function></member>
    <member><function>crypt</function></member>
    <member><link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="&url.password.compat;">implementacja użytkownika</link></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
