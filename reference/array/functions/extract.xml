<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 4a7ddddc27271967b616ad3400cfbe2a9b48212b Maintainer: leszek Status: ready -->
<!-- $Revision$ -->
<!-- CREDITS: sobak -->
<refentry xml:id="function.extract" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>extract</refname>
  <refpurpose>Importuje podane zmienne do tablicy symboli</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>extract</methodname>
   <methodparam><type>array</type><parameter role="reference">array</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter><initializer><constant>EXTR_OVERWRITE</constant></initializer></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>prefix</parameter><initializer>""</initializer></methodparam>
  </methodsynopsis>
  <para>
   Ta funkcja służy do importowania zmiennych z tablicy do bieżącej tablicy
   symboli.
  </para>
  <para>
   Sprawdzany jest każdy element przekazanej tablicy <parameter>array</parameter>, żeby zobaczyć czy jest on poprawną nazwą zmiennej.
   Funkcja sprawdza także kolizje z już istniejącymi zmiennymi
   w tablicy symboli.
  </para>
  <warning>
   <para>
    Nie używaj <function>extract</function> na niezaufanych danych, jak dane pochodzące od użytkownika
    (np. w <varname>$_GET</varname> lub <varname>$_FILES</varname>).
   </para>
  </warning>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>array</parameter></term>
     <listitem>
      <para>
       Tablica asocjacyjna. Ta funkcja traktuje jej klucze jak nazwy zmiennych i
       wartości tej tablicy jak wartości zmiennych. Dla każdej pary klucz/wartość stworzona
       zostanie zmienna w obecnej tablicy symboli, po poddaniu
       ich pod działanie parametrów
       <parameter>flags</parameter> i <parameter>prefix</parameter>.
      </para>
      <para>
       Musisz użyć tablicy asocjacyjnej, tablica indeksowana numerycznie
       nie zadziała, chyba że użyjesz <constant>EXTR_PREFIX_ALL</constant> lub
       <constant>EXTR_PREFIX_INVALID</constant>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       Sposób w jaki traktowane są niepoprawne klucze, klucze numeryczne i kolizje
       jest określony przez flagi. Ten parametr może mieć jedną z następujących
       wartości:
       <variablelist>
        <varlistentry>
         <term><constant>EXTR_OVERWRITE</constant></term>
         <listitem>
          <simpara>
           Jeśli istnieje kolizja, nadpisz istniejącą zmienną.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>EXTR_SKIP</constant></term>
         <listitem>
          <simpara>
           Jeśli istnieje kolizja, nie nadpisuj istniejącej
           zmiennej.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>EXTR_PREFIX_SAME</constant></term>
         <listitem>
          <simpara>Jeśli istnieje kolizja, na początek nazwy zmiennej wstaw
           <parameter>prefix</parameter>.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>EXTR_PREFIX_ALL</constant></term>
         <listitem>
          <simpara>
           Na początek każdej nazwy zmiennej wstaw
           <parameter>prefix</parameter>.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>EXTR_PREFIX_INVALID</constant></term>
         <listitem>
          <simpara>
           Tylko w wypadku niepoprawnych/numerycznych nazw zmiennych
           wstaw na początek wartość argumentu <parameter>prefix</parameter>.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>EXTR_IF_EXISTS</constant></term>
         <listitem>
          <simpara>
           Nadpisz zmienną tylko wtedy, gdy już istnieje w
           bieżącej tablicy symboli. Jest to przydatne
           do definiowania listy poprawnych zmiennych i ekstrakcji
           tylko tych zmiennych, które już wcześniej zdefiniowano,
           na przykład z tablicy <varname>$_REQUEST</varname>.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>EXTR_PREFIX_IF_EXISTS</constant></term>
         <listitem>
          <simpara>
           Prefiks zostanie dodany tylko do zmiennych których odpowiedniki
           bez przedrostka już istnieją w bieżącej tablicy symboli.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>EXTR_REFS</constant></term>
         <listitem>
          <simpara>
           Ekstraktuje zmienne jako referencje. Oznacza to, że wartości
           zaimportowanych zmiennych ciągle odnoszą się do wartości parametru
           <parameter>array</parameter>. Flaga ta może być użyta
           sama lub w połączaniu z innymi flagami poprzez użycie operacji OR na
           parametrze <parameter>flags</parameter>.
          </simpara>
         </listitem>
        </varlistentry>
       </variablelist>
      </para>
      <para>
       Jeśli parametr <parameter>flags</parameter> nie został podany, to
       używana jest opcja <constant>EXTR_OVERWRITE</constant>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>prefix</parameter></term>
     <listitem>
      <para>
       Zauważ, że parametr <parameter>prefix</parameter> jest wymagany tylko,
       jeśli parametr <parameter>flags</parameter> to <constant>EXTR_PREFIX_SAME</constant>,
       <constant>EXTR_PREFIX_ALL</constant>, <constant>EXTR_PREFIX_INVALID</constant>
       lub <constant>EXTR_PREFIX_IF_EXISTS</constant>. Jeśli
       nazwa zmiennej po dodaniu prefiksu nie jest prawidłową nazwą zmiennej, nie jest
       importowana do tablicy symboli. Prefiksy są automatycznie oddzielane od
       kluczy tablicy poprzez znak "_".
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Zwraca liczbę zmiennych pomyślnie zaimportowanych do tablicy
   symboli.
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Przykład użycia <function>extract</function></title>
    <para>
     Jednym z przykładów użycia <function>extract</function> może być
     zaimportowanie zmiennych zawartych w tablicy asocjacyjnej zwróconej
     przez <function>wddx_deserialize</function>.
    </para>
    <programlisting role="php">
     <![CDATA[
<?php

/* Załóżmy że $var_array jest tablicą zwróconą przez
   wddx_deserialize */

$size = "duży";
$var_array = array("color" => "niebieski",
                   "size"  => "średni",
                   "shape" => "kwadrat");
extract($var_array, EXTR_PREFIX_SAME, "wddx");

echo "$color, $size, $shape, $wddx_size\n";

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
     <![CDATA[
niebieski, duży, kwadrat, średni
]]>
    </screen>
    <para>
     Zmienna <varname>$size</varname> nie została nadpisana, ponieważ użyliśmy flai
     <constant>EXTR_PREFIX_SAME</constant>, co spowodowało utworzenie
     <varname>$wddx_size</varname>. Jeśli użylibyśmy <constant>EXTR_SKIP</constant>,
     to <varname>$wddx_size</varname> nie zostałaby stworzona.
     <constant>EXTR_OVERWRITE</constant> spowodowałoby że <varname>$size</varname> miałoby
     wartość "średni", a <constant>EXTR_PREFIX_ALL</constant> stworzyłoby nowe zmienne
     nazwane <varname>$wddx_color</varname>,
     <varname>$wddx_size</varname> i
     <varname>$wddx_shape</varname>.
    </para>
   </example>
  </para>
 </refsect1>
 <refsect1 role="notes">
  &reftitle.notes;
  <warning>
   <para>
    Nie używaj <function>extract</function> na niezaufanych danych, jak
    dane pochodzące od użytkownika
    (np. <varname>$_GET</varname>, <varname>$_FILES</varname> itd).
    Jeśli już musisz, upewnij się, że używasz jednej z wartości parametru <parameter>flags</parameter>,
    która nie nadpisuje istniejących zmiennych takich jak
    <constant>EXTR_SKIP</constant> i miej świadomość że powinieneś ekstrahować
    w takiej smaej kolejności jaka określona jest w
    <link linkend="ini.variables-order">variables_order</link> w
    <link linkend="ini">&php.ini;</link>.
   </para>
  </warning>
 </refsect1>
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>compact</function></member>
    <member><function>list</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
