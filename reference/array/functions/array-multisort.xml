<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 2e60c5134e7a847c99f81eb3f7ecee1f5efeeace Maintainer: leszek Status: ready -->
<!-- $Revision$ -->
<refentry xml:id="function.array-multisort" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>array_multisort</refname>
  <refpurpose>Posortuj wiele tablic lub tablice wielowymiarowe</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>array_multisort</methodname>
   <methodparam><type>array</type><parameter role="reference">array1</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>array1_sort_order</parameter><initializer>SORT_ASC</initializer></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>array1_sort_flags</parameter><initializer>SORT_REGULAR</initializer></methodparam>
   <methodparam rep="repeat"><type>mixed</type><parameter>rest</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>array_multisort</function> może być użyta do sortowania kilku
   tablic na raz lub wielowymiarowej tablicy na podstawie jednego z większej
   liczby wymiarów.
  </para>
  <para>
   Klucze asocjacyjne (typu <type>string</type>) są zachowywane, a indeksy
   numeryczne są przenumerowywane.
  </para>
  &note.sort-unstable;
  &note.reset-index;
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>array1</parameter></term>
     <listitem>
      <para>
       Tablica do posortowania.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>array1_sort_order</parameter></term>
     <listitem>
      <para>
       Kolejność sortowania dla poprzedniego argumentu tablicy. <constant>SORT_ASC</constant>
       aby posortować rosnąco lub <constant>SORT_DESC</constant>, aby posortować malejąco.
      </para>
      <para>
       Ten argument może byc zamieniony z <parameter>array1_sort_flags</parameter>
       lub całkowicie pominięty - w tym wypadku zakładane jest użycie <constant>SORT_ASC</constant>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>array1_sort_flags</parameter></term>
     <listitem>
      <para>
       Opcje sortowania dla poprzedniego argumentu tablicy:
      </para>
      <para>
       Flagi sortowania:
       <itemizedlist>
        <listitem>
         <simpara><constant>SORT_REGULAR</constant> - porównuj elementy normalnie
          (nie zmieniając typów)</simpara>
        </listitem>
        <listitem>
         <simpara><constant>SORT_NUMERIC</constant> - porównuj elementy numerycznie</simpara>
        </listitem>
        <listitem>
         <simpara><constant>SORT_STRING</constant> - porównuj elementy jak ciągi znaków</simpara>
        </listitem>
        <listitem>
         <simpara>
          <constant>SORT_LOCALE_STRING</constant> - porównuj elementy jak
          ciągi znaków, z uwzględnieniem ustawień regionalnych (locale). Używane
          ustawienia regionalne mogą być zmienione funkcją <function>setlocale</function>
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          <constant>SORT_NATURAL</constant> - porównuj elementy jak ciągi znaków,
          używając "sortowania naturalnego" tak jak <function>natsort</function>
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          <constant>SORT_FLAG_CASE</constant> - może być połączona
          (poprzez bitowe OR) z flagami
          <constant>SORT_STRING</constant> lub
          <constant>SORT_NATURAL</constant> aby posortować ciągi znaków bez rozróżniania wielkości liter
         </simpara>
        </listitem>
       </itemizedlist>
      </para>
      <para>
       Ten argument może byc zamieniony z <parameter>array1_sort_order</parameter>
       lub całkowicie pominięty - w tym wypadku zakładane jest użycie <constant>SORT_REGULAR</constant>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>rest</parameter></term>
     <listitem>
      <para>
       Więcej tablic, po których mogą następować flagi kolejności i opcji sortowania.
       Porównywane są tylko elementy odpowiadające elementom w poprzednich tablicach.
       Innymi słowy, sortowani jest leksykograficzne.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Sortowanie wielu tablic</title>
    <programlisting role="php">
<![CDATA[
<?php
$tbl1 = array(10, 100, 100, 0);
$tbl2 = array(1, 3, 2, 4);
array_multisort($tbl1, $tbl2);

var_dump($tbl1);
var_dump($tbl2);
?>
]]>
    </programlisting>
    <para>
     W tym przypadku, po sortowaniu, pierwsza tablica będzie zawierać 0,
     10, 100, 100, a druga 4, 1, 2, 3.
     Elementy drugiej tablicy odpowiadające identycznym
     elementom pierwszej tablicy (100 i 100) także zostały posortowane.
    </para>
    <screen>
<![CDATA[
array(4) {
  [0]=> int(0)
  [1]=> int(10)
  [2]=> int(100)
  [3]=> int(100)
}
array(4) {
  [0]=> int(4)
  [1]=> int(1)
  [2]=> int(2)
  [3]=> int(3)
}
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Sortowanie tablicy wielowymiarowej</title>
    <programlisting role="php">
<![CDATA[
<?php
$ar = array(
       array("10", 11, 100, 100, "a"),
       array(   1,  2, "2",   3,   1)
      );
array_multisort($ar[0], SORT_ASC, SORT_STRING,
                $ar[1], SORT_NUMERIC, SORT_DESC);
var_dump($ar);
?>
]]>
    </programlisting>
    <para>
     W tym przykładzie, po posortowaniu, pierwsza tablica przekształci się
     do postaci "10", 100, 100, 11, "a" (została posortowana jako ciągi
     znakowe w porządku rosnącym). Druga tablica będzie zawierała elementy
     1, 3, "2", 2, 1 (sortowanie liczbowe w porządku malejącym).
    </para>
    <screen>
<![CDATA[
array(2) {
  [0]=> array(5) {
    [0]=> string(2) "10"
    [1]=> int(100)
    [2]=> int(100)
    [3]=> int(11)
    [4]=> string(1) "a"
  }
  [1]=> array(5) {
    [0]=> int(1)
    [1]=> int(3)
    [2]=> string(1) "2"
    [3]=> int(2)
    [4]=> int(1)
  }
}
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Sortowanie wyników zapytań do baz danych</title>
    <para>
     Dla tego przykładu, każdy element tablicy <varname>dane</varname>
     reprezentuje pojedynczy wiersz z tabeli. Ten typ danych jest typowy dla
     rekordów baz danych.
    </para>
    <para>
     Przykładowe dane:
    </para>
    <screen>
<![CDATA[
numer | edycja
-------+--------
   67 |      2
   86 |      1
   85 |      6
   98 |      2
   86 |      6
   67 |      7
]]>
    </screen>
    <para>
     Dane zawarte są w tablicy o nazwie <varname>dane</varname>. Efekt ten
     można uzyskać np. wywołując w pętli funkcję <function>mysqli_fetch_assoc</function>.
    </para>
    <para>
     W tym przykładzie, dane zostaną posortowane według pola <varname>numer</varname> malejąco
     oraz względem pola <varname>edycja</varname> rosnąco.
    </para>
    <para>
     W zmiennej znajduje się tablica wierszy, lecz <function>array_multisort</function>
     wymaga tablicy kolumn, tak więc użyjemy kodu poniżej, aby uzyskać kolumny,
     a następnie przeprowadzić sortowanie.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
// Dane pobrane przez przejście pętlą po mysqli_fetch_assoc()
$dane[] = array('numer' => 67, 'edycja' => 2);
$dane[] = array('numer' => 86, 'edycja' => 1);
$dane[] = array('numer' => 85, 'edycja' => 6);
$dane[] = array('numer' => 98, 'edycja' => 2);
$dane[] = array('numer' => 86, 'edycja' => 6);
$dane[] = array('numer' => 67, 'edycja' => 7);

// Pobierz listę kolumn
foreach ($dane as $klucz => $wiersz) {
    $numer[$klucz]  = $wiersz['numer'];
    $edycja[$klucz] = $wiersz['edycja'];
}

// Możesz użyć array_column() zamiast kodu wyżej
$numer  = array_column($data, 'numer');
$edycja = array_column($data, 'edycja');

// Posortuj dane według numeru malejąco i edycji rosnąco
// Należy podać $dane jako ostatni parametr, aby posortować według
// wspólnego klucza
array_multisort($numer, SORT_DESC, $edycja, SORT_ASC, $dane);

// Przeiteruj się po danych i wyświetl posortowane wartości dla każdej z kolumn
echo 'numer | edycja', PHP_EOL;
echo '------+-------', PHP_EOL;
for ($i = 0; $i < count($data); $i++) {
     printf("%5d | %6d\n", $volume[$i], $edition[$i]);
}
?>
]]>
    </programlisting>
    <para>
     Zbiór danych jest teraz posortowany. Wygląda on tak:
    </para>
    <screen>
<![CDATA[
numer | edycja
------+--------
   98 |      2
   86 |      1
   86 |      6
   85 |      6
   67 |      2
   67 |      7
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Sortowanie z ignorowaniem wielkości znaków</title>
    <para>
     Zarówno <constant>SORT_STRING</constant> jak
     <constant>SORT_REGULAR</constant>, powodują sortowanie z rozróżnianiem
     wielkości znaków. Ciągi zaczynające się od dużej litery znajdą się
     przed ciągami zaczynającymi się od litery małej.
    </para>
    <para>
     Aby przeprowadzić sortowanie ignorujące wielkość znaków, należy
     wymusić, aby porządek sortowania był określany przez kopię oryginalnej
     tablicy, w której wszystkie znaki zostaną zmienione na małe.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$tablica = array('Alfa', 'atomowy', 'Beta', 'bank');
$tablica_male = array_map('strtolower', $tablica);

array_multisort($tablica_male, SORT_ASC, SORT_STRING, $tablica);

print_r($tablica);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Array
(
    [0] => Alfa
    [1] => atomowy
    [2] => bank
    [3] => Beta
)
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>usort</function></member>
    <member>&seealso.array.sorting;</member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
