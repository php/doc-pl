<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 2e60c5134e7a847c99f81eb3f7ecee1f5efeeace Maintainer: leszek Status: ready -->
<!-- $Revision$ -->
<refentry xml:id="function.usort" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>usort</refname>
  <refpurpose>Sortuje elementy tablicy używając zdefiniowanej przez użytkownika funkcji porównującej</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>true</type><methodname>usort</methodname>
   <methodparam><type>array</type><parameter role="reference">array</parameter></methodparam>
   <methodparam><type>callable</type><parameter>callback</parameter></methodparam>
  </methodsynopsis>
  <para>
   Sortuje tablicę przekazaną jako <parameter>array</parameter> używając
   funkcji porównującej przekazanej przez użytkownika do ustalenia ich kolejności.
  </para>
  &note.sort-unstable;
  &note.no-key-association;
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>array</parameter></term>
     <listitem>
      <para>
       Tablica wejściowa.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>callback</parameter></term>
     <listitem>
      &sort.callback.description;
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.true.always;
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     &return.type.true;
     &array.changelog.by-ref;
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example xml:id="function.usort.examples.basic">
    <title>Przykład użycia <function>usort</function></title>
    <programlisting role="php">
<![CDATA[
<?php
function cmp($a, $b)
{
    if ($a == $b) {
        return 0;
    }
    return ($a < $b) ? -1 : 1;
}

$a = array(3, 2, 5, 6, 1);

usort($a, "cmp");

foreach ($a as $key => $value) {
    echo "$key: $value\n";
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
0: 1
1: 2
2: 3
3: 5
4: 6
]]>
    </screen>
    <para>
     Można też użyć operatora "statku kosmicznego",
     aby uprościć porównanie jeszcze bardziej.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
function cmp($a, $b)
{
    return $a <=> $b;
}

$a = array(3, 2, 5, 6, 1);

usort($a, "cmp");

foreach ($a as $key => $value) {
    echo "$key: $value\n";
}
?>
]]>
    </programlisting>
   </example>
  </para>
  <note>
   <para>
    Oczywiście w tym prostym przykładzie lepiej jest skorzystać z funkcji
    <function>sort</function>.
   </para>
  </note>
  <para>
   <example xml:id="function.usort.examples.multi">
    <title>
     Przykład użycia <function>usort</function> do sortowania tablic wielowymiarowych
    </title>
    <programlisting role="php">
<![CDATA[
<?php
function cmp($a, $b)
{
    return strcmp($a["fruit"], $b["fruit"]);
}

$fruits[0]["fruit"] = "cytryny";
$fruits[1]["fruit"] = "jabłka";
$fruits[2]["fruit"] = "winogrona";

usort($fruits, "cmp");

foreach ($fruits as $key => $value) {
    echo "\$fruits[$key]: " . $value["fruit"] . "\n";
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
$fruits[0]: cytryny
$fruits[1]: jabłka
$fruits[2]: winogrona
]]>
    </screen>
    <para>
     Gdy sortowana jest tablica wielowymiarowa, <varname>$a</varname> and
     <varname>$b</varname> zawierają referencję do pierwszego indeksu tablicy.
    </para>
   </example>
  </para>
  <para>
   <example xml:id="function.usort.examples.object">
    <title>
     Przykład użycia <function>usort</function> używając metody obiektu
    </title>
    <programlisting role="php">
<![CDATA[
<?php
class TestObj {
    public string $name;

    function __construct($name)
    {
        $this->name = $name;
    }

    /* Ta metoda statyczna będzie naszą funkcją porównującą: */
    static function cmp_obj($a, $b)
    {
        return strtolower($a->name) <=> strtolower($b->name);
    }
}

$a[] = new TestObj("c");
$a[] = new TestObj("b");
$a[] = new TestObj("d");

usort($a, [TestObj::class, "cmp_obj"]);

foreach ($a as $item) {
    echo $item->name . "\n";
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
b
c
d
]]>
    </screen>
   </example>
   <example xml:id="function.usort.examples.closure">
    <title>
     Przykład użycia <function>usort</function> z <link linkend="functions.anonymous">domknięciem</link>
     do posortowania tablicy wielowymiarowej
    </title>
    <programlisting role="php">
<![CDATA[
<?php
$array[0] = array('key_a' => 'z', 'key_b' => 'c');
$array[1] = array('key_a' => 'x', 'key_b' => 'b');
$array[2] = array('key_a' => 'y', 'key_b' => 'a');

function build_sorter($key) {
    return function ($a, $b) use ($key) {
        return strnatcmp($a[$key], $b[$key]);
    };
}

usort($array, build_sorter('key_b'));

foreach ($array as $item) {
    echo $item['key_a'] . ', ' . $item['key_b'] . "\n";
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
y, a
x, b
z, c
]]>
    </screen>
   </example>
   <example xml:id="function.usort.examples.multiple-axes">
    <title>
     Przykład użycia <function>usort</function> z operatorem "statku kosmicznego"
    </title>
    <para>
     Operator "statku kosmicznego" (spaceship operator) pozwala na proste porównanie
     złożonych wartości wzdłuż wielu osi. Następujący przykład posortuje
     elementy tablicy <literal>$people</literal> po nazwiskach, a potem po imionach,
     jeśli nazwisko jest takie samo.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$people[0] = ['imie' => 'Adam', 'nazwisko' => 'West'];
$people[1] = ['imie' => 'Alec', 'nazwisko' => 'Baldwin'];
$people[2] = ['imie' => 'Adam', 'nazwisko' => 'Baldwin'];

function sorter(array $a, array $b) {
    return [$a['nazwisko'], $a['imie']] <=> [$b['nazwisko'], $b['imie']];
}

usort($people, 'sorter');

foreach ($people as $person) {
    print $person['nazwisko'] . ', ' . $person['imie'] . PHP_EOL;
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Baldwin, Adam
Baldwin, Alec
West, Adam
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><function>uasort</function></member>
   <member><function>uksort</function></member>
   <member>&seealso.array.sorting;</member>
  </simplelist>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
