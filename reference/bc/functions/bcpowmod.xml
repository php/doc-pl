<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 3295741565f760edd22e305bd10e37f243e9e194 Maintainer: sobak Status: ready -->
<!-- $Revision$ -->
<refentry xml:id="function.bcpowmod" xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">
 <refnamediv>
  <refname>bcpowmod</refname>
  <refpurpose>Podnosi liczbę o dużej precyzji do potęgi i wykonuje dzielenie modulo</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>bcpowmod</methodname>
   <methodparam><type>string</type><parameter>num</parameter></methodparam>
   <methodparam><type>string</type><parameter>exponent</parameter></methodparam>
   <methodparam><type>string</type><parameter>modulus</parameter></methodparam>
   <methodparam choice="opt"><type class="union"><type>int</type><type>null</type></type><parameter>scale</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para>
   Używa metody szybkiego potęgowania do podniesienia
   parametru <parameter>num</parameter> do potęgi
   <parameter>exponent</parameter> z uwzględnieniem modulo
   <parameter>modulus</parameter>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>num</parameter></term>
     <listitem>
      <para>
       Podstawa jako numeryczny łańcuch znaków ciąg znaków (skala musi wynosić zero).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>exponent</parameter></term>
     <listitem>
      <para>
       Wykładnik, jako nieujemny numeryczny łańcuch znaków (skala musi wynosić zero).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>modulus</parameter></term>
     <listitem>
      <para>
       Dzielnik modulo jako numeryczny ciąg znaków (skala musi wynosić zero).
      </para>
     </listitem>
    </varlistentry>
    <xi:include xpointer="function.bcadd..parameters.scale" />
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Zwraca wynik jako ciąg znaków.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Ta funkcja rzuca <exceptionname>ValueError</exceptionname> w następujących wypadkach:
   <simplelist>
    <member><parameter>num</parameter>, <parameter>exponent</parameter> lub <parameter>modulus</parameter> nie są poprawnie sformatowanymi dla BCMath ciągami numerycznymi</member>
    <member><parameter>num</parameter>, <parameter>exponent</parameter> lub <parameter>modulus</parameter> mają część ułamkową</member>
    <member><parameter>exponent</parameter> ma wartość ujemną</member>
    <member><parameter>scale</parameter> jest poza poprawnym zakresem</member>
   </simplelist>
  </para>
  <simpara>
   Ta funkcja rzuca wyjątek <exceptionname>DivisionByZeroError</exceptionname> jeśli <parameter>modulus</parameter>
   wynosi <literal>0</literal>.
  </simpara>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.0.0</entry>
      <entry>
       Parametr <parameter>scale</parameter> dopuszcza teraz &null;.
      </entry>
     </row>
     <row>
      <entry>8.0.0</entry>
      <entry>
       Od teraz rzucany jest <exceptionname>ValueError</exceptionname> zamiast zwrócenia &false; jeśli <parameter>exponent</parameter> jest ujemną wartością.
      </entry>
     </row>
     <row>
      <entry>8.0.0</entry>
      <entry>
       Dzielenie przez <literal>0</literal> rzuca teraz wyjątek <exceptionname>DivisionByZeroError</exceptionname> zamiast zwracać &false;.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   Poniższe wykonania działają identycznie. Funkcja
   <function>bcpowmod</function> wykonuje się jednak
   szybciej i może przyjąć większe argumenty.
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$a = bcpowmod($x, $y, $mod);

$b = bcmod(bcpow($x, $y), $mod);

// $a i $b są sobie równe.

?>
]]>
    </programlisting>
   </informalexample>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    Jako iż ta funkcja korzysta z dzielenia modulo, to liczby, które nie są
    dodatnimi liczbami całkowitymi mogą dawać niespodziewane wyniki.
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>bcpow</function></member>
    <member><function>bcmod</function></member>
    <member><methodname>BcMath\Number::powmod</methodname></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
