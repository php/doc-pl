<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: cdc9d28d334bbc08386fecf8aade66080004a9dd Maintainer: sobak Status: ready -->
<!-- $Revision$ -->
<!-- CREDITS: grzesiek -->
<refentry xml:id="function.define" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>define</refname>
  <refpurpose>Definiuje nazwaną stałą</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>define</methodname>
   <methodparam><type>string</type><parameter>constant_name</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>value</parameter></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>case_insensitive</parameter><initializer>&false;</initializer></methodparam>
  </methodsynopsis>
  <para>
   Tworzy nazwaną stałą w czasie wykonywania skryptu.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>constant_name</parameter></term>
     <listitem>
      <para>
       Nazwa stałej.
      </para>
      <note>
       <para>
        Możliwe jest <function>zdefiniowanie</function> stałych o zastrzeżonych
        lub nawet nieprawidłowych nazwach, których wartość można (tylko) pobrać
        za pomocą funkcji <function>constant</function>. Nie jest to jednak zalecane.
       </para>
      </note>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>value</parameter></term>
     <listitem>
      <para>
       Wartość stałej. W PHP <parameter>value</parameter> musi być typu skalarnego
       (<type>int</type>, <type>float</type>, <type>string</type>, <type>bool</type> lub &null;).
       W PHP 7 dozwolone są także tablice (typ <type>array</type>).
      </para>
	  <warning>
       <para>
        Mimo iż jest możliwe zdefiniowanie stałych zawierających zasób (<type>resource</type>),
        jest to niezalecane i może spowodować nieprzewidziane zachowanie.
       </para>
      </warning>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>case_insensitive</parameter></term>
     <listitem>
      <para>
       Jeżeli ustawione na &true;, stała będzie zdefiniowana bez zwracania uwagi
       na wielkosć znaków. Domyślne ustawienie bierze pod uwagę wielkość znaków; stałe 
       <literal>CONSTANT</literal> i <literal>Constant</literal> reprezentują
       różne wartości.
      </para>
      <warning>
       <simpara>
        Definiowanie stałych niewrażliwych na wielkość liter jest przestarzałe od PHP 7.3.0.
        Od PHP 8.0.0 tylko &false; jest akceptowalną wartością, przekazanie &true;
        spowoduje wyświetlenie ostrzeżenia.
       </simpara>
      </warning>
      <note>
       <para>
        Stałe nieczułe na wielkość znaków są przechowywane jako zapisane małymi literami.
       </para>
      </note>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>8.0.0</entry>
       <entry>
        Przekazanie &true; do parametru <parameter>case_insensitive</parameter> emituje teraz
        <constant>E_WARNING</constant>. Przekazanie &false; jest nadal dozwolone.
       </entry>
      </row>
      <row>
       <entry>7.3.0</entry>
       <entry>
        Parametr <parameter>case_insensitive</parameter> został zdeprecjonowany i zostanie usunięty w wersji 8.0.0.
       </entry>
      </row>
      <row>
       <entry>7.0.0</entry>
       <entry>
        Dozwolone są wartości tablicowe (<type>array</type>).
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Definiowanie stałych</title>
    <programlisting role="php">
<![CDATA[
<?php
define("STALA", "Witaj świecie.");
echo STALA; // wyświetli "Witaj świecie."
echo Stala; // wyświetli "Stala" i wyemituje komunikat typu notice.

define("POZDROWIENIE", "Cześć.", true);
echo POZDROWIENIE; // wyświetli "Cześć."
echo Pozdrowienie; // wyświetli "Cześć."


// Działa od PHP 7
define('ZWIERZETA', array(
    'pies',
    'kot',
    'ptak'
));
echo ZWIERZETA[1]; // wyświetli "kot"
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Stałe z nazwami zastrzeżonymi</title>
    <para>
     Ten przykład ilustruje <emphasis>możliwość</emphasis> zdefiniowania
     stałej o tej samej nazwie, co
     <link linkend="language.constants.predefined">stała magiczna</link>.
     Ponieważ wynikające z tego zachowanie jest oczywiście mylące, 
     nie zaleca się robienia tego w praktyce.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
var_dump(defined('__LINE__'));
var_dump(define('__LINE__', 'test'));
var_dump(constant('__LINE__'));
var_dump(__LINE__);
?>
]]>
    </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
bool(false)
bool(true)
string(4) "test"
int(5)
]]>
   </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>defined</function></member>
    <member><function>constant</function></member>
    <member>Sekcja poświęcona <link linkend="language.constants">stałym</link></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
