<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: a0a0165e07a83d74a66c316d52b04c1f4bf52aeb Maintainer: sobak Status: ready -->
<!-- $Revision$ -->
<refentry xml:id="function.eval" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>eval</refname>
  <refpurpose>Wykonuje łańcuch znaków jak kod PHP</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>eval</methodname>
   <methodparam><type>string</type><parameter>kod</parameter></methodparam>
  </methodsynopsis>
  <para>
   Wykonuje podany <parameter>kod</parameter> jako PHP.
  </para>
  <caution>
   <para>
    Konstrukcja <function>eval</function> jest <emphasis>bardzo niebezpieczna</emphasis>,
    ponieważ pozwala na wykonanie dowolnego kodu PHP. <emphasis>Jej użycie jest
    odradzane.</emphasis> Jeżeli dokładnie sprawdziłeś, że nie ma innej opcji
    niż użycie tej konstrukcji, przyłóż szczególną uwagę, aby <emphasis>nie przekazywać do niej
    danych pochodzących od użytkownika</emphasis> bez uprzedniej należytej walidacji.
   </para>
  </caution>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>kod</parameter></term>
     <listitem>
      <para>
       Poprawny kod PHP do wykonania.
      </para>
      <para>
       Kod nie może być ujęty w otwierające i zamykające
       <link linkend="language.basic-syntax.phpmode">znaczniki PHP</link>, przykładowo
       <literal>'echo "Cześć!";'</literal> musi być przekazane zamiast
       <literal>'&lt;?php echo "Cześć!"; &gt;'</literal>. Jest możliwe opuszczanie i ponowne
       wchodzenie w tryb PHP przez odpowiednie tagi, np.
       <literal>'echo "W trybie PHP!"; ?&gt;W trybie HTML!&lt;?php echo "Znów w trybie PHP!";'</literal>.
      </para>
      <para>
       Ponadto przekazany kod musi być poprawnym kodem PHP. Wszystkie instrukcje muszą być
       odpowiednio zakończone używając średnika. Przykładowo
       <literal>'echo "Cześć!"'</literal> wywoła błąd parsowania, podczas gdy
       <literal>'echo "Hi!";'</literal> zadziała.
      </para>
      <para>
       Instrukcja <literal>return</literal> natychmiastowo przerwie
       wykonywanie kodu.
      </para>
      <para>
       Kod będzie wykonany w stosie wywyołującym <function>eval</function>. Z tego powodu wszystkie
       zmienne zdefiniowane lub zmienione w <function>eval</function> pozostaną widoczne po jego
       wykonaniu.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <function>eval</function> zwraca &null; o ile nie użyto instrukcji 
   <literal>return</literal> w wykonywanym kodzie, wtedy zwracana jest
   wartość przekazana do <literal>return</literal>.  Od PHP 7, jeżeli wystąpi
   błąd parsowania w wywoływanym kodzie, <function>eval</function> rzuca wyjątek
   ParseError. Przed PHP 7 w takim wypadku <function>eval</function> zwracał
   &false;, a wykonywanie dalszego kodu odbywało się normalnie. Nie da się złapać
   błędu parsowania występującego w <function>eval</function>
   używając funkcji <function>set_error_handler</function>.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>eval</function> - proste łączenie tekstu</title>
    <programlisting role="php">
<![CDATA[
<?php
$string = 'filiżanka';
$name = 'kawą';
$str = 'To jest $string z $name w środku.';
echo $str. "\n";
eval("\$str = \"$str\";");
echo $str. "\n";
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
To jest $string z $name w środku.
To jest filiżanka z kawą w środku.
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;

  &note.language-construct;

  &tip.ob-capture;
  <note>
   <para>
    W wypadku błędu krytycznego w wykonywanym kodzie, cały skrypt kończy działanie.
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>call_user_func</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
