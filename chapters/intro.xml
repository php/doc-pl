<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 9cc4767b2ddf65c4ed592c9deb818cbb2c9def7b Maintainer: sobak Status: ready -->
<!-- $Revision$ -->
 <chapter xml:id="introduction" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <info><title>Wprowadzenie</title></info>

  <section xml:id="intro-whatis">
   <info><title>Czym jest PHP?</title></info>
   <para>
    <acronym>PHP</acronym> (akronim rekursywny od <literal>PHP: Hypertext
    Preprocessor</literal>) to szeroko używany język skryptowy open source
    ogólnego przeznaczenia, który jest specjalnie dostosowany do tworzenia
    aplikacji webowych i może zostać osadzony w kodzie HTML.
   </para>
   <para>
    Nieźle, ale co to w zasadzie znaczy? Przykład:
   </para>
   <para>
    <example>
     <info><title>Przykład wprowadzający</title></info>
     <programlisting role="php">
<![CDATA[
<!DOCTYPE HTML>
<html>
    <head>
        <title>Przykład</title>
    </head>
    <body>

        <?php
            echo "Hej, jestem skryptem PHP!";
        ?>

    </body>
</html>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Zamiast wielu komend do wyświetlenia HTML (jak w C lub Perlu),
    strony w PHP zawierają HTML z osadzonym kodem, który robi
    "coś" (w tym wypadku wyświetla "Hej, jestem skryptem PHP!").
    Kod PHP jest zamknięty w specjalnych <link
    linkend="language.basic-syntax.phpmode">instrukcjach początku i
    końca przetwarzania <code>&lt;?php</code> i <code>?&gt;</code></link>,
    które pozwalają na "wskoczenie" i "wyskoczenie" z "trybu PHP."
   </para>
   <para>
    Tym co odróżnia PHP od rzeczy takich jak JavaScript po stronie klienta
    jest fakt że kod jest wykonywany na serwerze, generując HTML który
    jest później wysyłany do klienta. Klient odbierze wynik działania
    skryptu, ale nie będzie wiedział jaki kod stał za jego wygenerowaniem.
    Możesz nawet skonfigurować serwer tak, aby przetwarzał wszystkie pliki HTML
    z pomocą parsera PHP - użytkownicy nie będą wtedy mieli żadnego sposobu
    na określenie jakiej technologii faktycznie używasz pod maską.
   </para>
   <para>
    Najlepszą cechą PHP jest fakt że jest on bardzo prosty dla
    początkujących, ale oferuje wiele zaawansowanych możliwości
    dla profesjonalnych programistów. Nie bój się długiej listy
    możliwości PHP. Pisanie prostych skryptów możesz rozpocząć
    już po kilku godzinach.
   </para>
   <para>
    Mimo iż rozwój PHP skupia się na skryptowaniu po stronie serwera,
    możesz z jego pomocą zrobić znacznie więcej. Kontynuuj czytanie
    w rozdziale <link linkend="intro-whatcando">Co potrafi PHP?</link>
    lub przejdź prosto do <link linkend="tutorial">tutoriala
    wprowadzającego</link>, jeśli jesteś zainteresowany tylko programowaniem
    webowym.
   </para>
  </section>

  <section xml:id="intro-whatcando">
   <info><title>Co potrafi PHP?</title></info>
   <para>
    Wszystko. PHP skupia się głównie na skryptowaniu po stronie serwera,
    więc może robić wszystko to, co dowolny inny program CGI, jak na
    przykład odbieranie danych z formularzy, generowanie dynamicznej treści
    strony czy wysyłanie i odbieranie ciasteczek. Lecz PHP może znacznie więcej.
   </para>
   <para>
    Istnieje kilka głównych obszarów, w których są wykorzystywane skrypty PHP.
    <itemizedlist>
     <listitem>
      <simpara>
       Skryptowanie po stronie serwera. To najbardziej tradycyjny
       i docelowo główny obszar działania dla PHP. Potrzebujesz trzech
       rzeczy aby działać: parsera PHP (CGI lub moduł serwera),
       serwera WWW i przeglądarki internetowej. Musisz uruchomić
       serwer z połączoną instalacją PHP. Wynik działania programów
       PHP możesz zobaczyć przy pomocy przeglądarki, odbierającej stronę
       z serwera. Wszystkie te rzeczy możesz uruchomić na własnej maszynie
       domowej, jeśli tylko eksperymentujesz z programowaniem w PHP. Zobacz
       <link linkend="install">instrukcje instalacji</link>,
       aby uzyskać więcej informacji.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Skryptowanie wiersza poleceń. Możesz stworzyć skrypt PHP
       uruchamiany bez żadnego serwera i przeglądarki.
       Do działania w taki sposób potrzebujesz tylko parsera PHP.
       Taki rodzaj wykorzystania jest idealny dla skryptów regularnie
       uruchamianych przez cron (na *nixach i Linuksach) lub Harmonogram
       Zadań (na Windowsie). Takie skrypty mogą być również użyte do
       prostych zadań przetwarzania tekstu. Zapoznaj się z rozdziałem o
       <link linkend="features.commandline">Używaniu PHP z wiersza poleceń</link>,
       aby dowiedzieć się więcej.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Pisanie aplikacji desktopowych. PHP nie jest prawdopodobnie
       najlepszym językiem do tworzenia aplikacji desktopowych,
       ale jeśli znasz go bardzo dobrze i chciałbyś użyć
       zaawansowanych możliwóści PHP w aplikacjach po stronie klienta,
       możesz użyć PHP-GTK do napisania takich programów. W ten sposób
       można też tworzyć aplikacje wieloplatformowe. PHP-GTK jest rozszerzeniem
       dla PHP, niedostępnym w głównej dystrybucji. Jeśli zainteresował Cię PHP-GTK,
       odwiedź <link xlink:href="&url.php.gtk;">jego
       stronę</link>.
      </simpara>
     </listitem>
    </itemizedlist>
   </para>
   <para>
    PHP może być <link linkend="install">używany</link> na wszystkich ważnych systemach operacyjnych, w tym
    Linuksie, wielu wariantach Uniksa (wliczając HP-UX, Solaris i OpenBSD),
    Microsoft Windows, macOS, RISC OS i prawdopodobnie innych.
    PHP ma także wsparcie dla większości obecnych serwerów WWW, wliczając
    Apache, IIS i wiele innych. Wliczają się w to także dowolne
    serwery ze wsparciem dla FastCGI PHP, jak lighttpd
    i nginx. PHP działa jako moduł lub procesor CGI.
   </para>
   <para>
    Tak więc z PHP masz wolność wyboru systemu operacyjnego
    i serwera WWW. Ponadto, masz także wybór między używaniem
    programowania proceduralnego, obiektowego (OOP) lub mieszanki
    ich obu.
   </para>
   <para>
    PHP nie ogranicza Cię jedynie do generowania kodu HTML. Do
    możliwości PHP zalicza się tworzenie obrazków, plików PDF a nawet
    animacji Flash (przy użyciu libswf lub Ming) generowanych w locie.
    Możesz też wygenerować dowolny tekst, jak XHTML lub dowolny inny plik
    plik XML. PHP może zapisać je do pliku zamiast wypisywać, więc może
    posłużyć za cache po stronie serwera dla dynamicznej zawartości.
   </para>
   <para>
    Jedną z najsilniejszych i najbardziej istotnych cech PHP jest wsparcie
    dla <link linkend="refs.database">szerokiej gamy baz danych</link>. 
    Tworzenie stron wykorzystujących bazy danych jest niesamowicie proste
    dzięki możliwosci użycia rozszerzeń dla konkretnej bazy danych (np. dla <link linkend="book.mysqli">mysql</link>)
    lub użyciu warstwy abstrakcji jak <link linkend="book.pdo">PDO</link>, czy też połączeniu
    do dowolnej bazy wspierającej standard Open Database Connection poprzez rozszerzenie
    <link linkend="book.uodbc">ODBC</link>. Niektóre bazy danych mogą także używać
    <link linkend="book.curl">cURLa</link> lub <link linkend="book.sockets">socketów</link>,
    jak CouchDB.
   </para>
   <para>
    PHP ma też wsparcie dla komunikacji z innymi usługami, używając protokołów
    takich jak LDAP, IMAP, SNMP, NNTP, POP3, HTTP, COM (w systemie Windows) i
    niezliczonych innych. Możesz także otwierać surowe sockety sieciowe dla
    interakcji z dowolnym innym protokołem. PHP ma wsparcie dla WDDX,
    kompleksowej wymiany danych między niemal wszystkimi językami webowymi.
    Mowiąc o łączeniu z innymi językami, PHP ma wsparcie dla tworzenia
    obiektów Javy i używania ich jako obiektów PHP.
   </para>
   <para>
    PHP ma parę przydatnych opcji dla <link linkend="refs.basic.text">przetwarzania tekstu</link>,
    w tym wyrażenia regularne kompatybilne z Perlem (<link linkend="book.pcre">PCRE</link>)
    oraz wiele rozszerzeń i narzędzi do <link linkend="refs.xml">odczytu i parsowania dokumentów XML</link>.
    PHP standardyzuje wszystkie rozszerzenia dzięki solidnej podstawie <link linkend="book.libxml">libxml2</link>
    i rozszerza zakres możliwości dodając rozszerzenia jak <link linkend="book.simplexml">SimpleXML</link>,
    <link linkend="book.xmlreader">XMLReader</link> i <link linkend="book.xmlwriter">XMLWriter</link>.
   </para>
   <para>
    A także wiele innych interesujących rozszerzeń, które zostały podzielone zarówno
    <link linkend="extensions">alfabetycznie</link> jak i <link linkend="funcref">według kategorii</link>.
    Istnieją też dodatkowe rozszenia PECL, które zostały lub nie zostały opisane w
    podręczniku PHP, jak <link xlink:href="&url.xdebug;">XDebug</link>.
   </para>
   <para>
    Jak widzisz, jedna strona nie wystarczy aby wymienić
    wszystkie możliwości i korzyści, które oferuje PHP.
    Kontynuuj czytanie rozdziału o <link linkend="install">instalacji
    PHP</link> i zobacz sekcję <link linkend="funcref">Opis
    Funkcji</link> aby zapoznać się ze wcześniej wymienionymi
    rozszerzeniami.
   </para>
  </section>

 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
