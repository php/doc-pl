<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 922b4b5aeb327d78ea1bb4b932e5db2e9a03ffc5 Maintainer: sobak Status: ready -->
<sect1 xml:id="language.oop5.constants" xmlns="http://docbook.org/ns/docbook">
 <title>Stałe w klasach</title>
 <para>
  Istnieje możliwość zdefiniowania <link linkend="language.constants">stałych</link>
  dla konkretnej klasy, które pozostają niezmienialne.
  Domyślna widoczność stałych w klasach to <literal>public</literal>.
 </para>
 <note>
  <para>
   Klasy w stałych mogą być zredefiniowane przez klasy potomne.
   Począwszy od PHP 8.1.0, klasy w stałych nie mogą być zredefiniowane przez klasy potomne,
   jeśli zostały zdefiniowane z modyfikatorem <link linkend="language.oop5.final">final</link>.
  </para>
 </note>
 <para>
  Interfejsy też mogą definiować stałe. Zapoznaj się
  z <link linkend="language.oop5.interfaces">dokumentacją interfejsów</link>,
  aby zobaczyć przykłady.
 </para>
 <para>
  Możliwe jest odniesienie się do stałej przy użyciu zmiennej.
  Wartość zmiennej nie może być słowem kluczowym (np. <literal>self</literal>,
  <literal>parent</literal> czy <literal>static</literal>).
 </para>
 <para>
  Stałe w klasach są alokowane raz na klasę, a nie raz dla każdej
  z instancji klasy.
 </para>
 <para>
  Od PHP 8.3.0 stałe w klasach mogą mieć typ skalarny, taki jak <literal>bool</literal>,
  <literal>int</literal>, <literal>float</literal>, <literal>string</literal> lub nawet
  <literal>array</literal>. Gdy użyty jest typ <literal>array</literal>, zawartością tablicy
  mogą być tylko inne typy skalarne.
 </para>
 <example>
  <title>Ustawienie i użycie stałej</title>
  <programlisting role="php">
<![CDATA[
<?php
class MojaKlasa
{
    const CONSTANT = 'wartość stałej';

    function showConstant() {
        echo  self::CONSTANT . "\n";
    }
}

echo MojaKlasa::CONSTANT . "\n";

$classname = "MojaKlasa";
echo $classname::CONSTANT . "\n";

$class = new MojaKlasa();
$class->showConstant();

echo $class::CONSTANT."\n";
?>
]]>
  </programlisting>
 </example>
 <para>
  Specjalna stała <constant>::class</constant> pozwala
  na rozwiązanie w pełni kwalifikowanej nazwy klasy w trakcie kompilacji,
  co przydaje się szczególnie dla klas w przestrzeniach nazw:
 </para>
 <example>
  <title>Użycie ::class z klasami w przestrzeniach nazw</title>
  <programlisting role="php">
<![CDATA[
<?php
namespace foo {
    class bar {
    }

    echo bar::class; // foo\bar
}
?>
]]>
  </programlisting>
 </example>

 <example>
  <title>Wyrażenia w stałych klasowych</title>
  <programlisting role="php">
<![CDATA[
<?php
const ONE = 1;
class foo {
    const TWO = ONE * 2;
    const THREE = ONE + self::TWO;
    const SENTENCE = 'Wartość THREE is '.self::THREE;
}
?>
]]>
  </programlisting>
 </example>

 <example>
  <title>Modyfikatory widoczności dla stałych klasach, od PHP 7.1.0</title>
  <programlisting role="php">
<![CDATA[
<?php
class Foo {
    public const BAR = 'bar';
    private const BAZ = 'baz';
}
echo Foo::BAR, PHP_EOL;
echo Foo::BAZ, PHP_EOL;
?>
]]>
  </programlisting>
   &example.outputs.71;
   <screen>
<![CDATA[
bar

Fatal error: Uncaught Error: Cannot access private const Foo::BAZ in …
]]>
   </screen>
 </example>
 <note>
  <para>
   Od PHP 7.1.0 dla stałych klasach dozwolone są modyfikatory widoczności.
  </para>
 </note>
 <example>
  <title>Sprawdzanie wariancji widoczności stałej klasy, od PHP 8.3.0</title>
  <programlisting role="php">
   <![CDATA[
<?php

interface MyInterface
{
    public const VALUE = 42;
}

class MyClass implements MyInterface
{
    protected const VALUE = 42;
}
?>
]]>
  </programlisting>
  &example.outputs.83;
  <screen>
   <![CDATA[
Fatal error: Access level to MyClass::VALUE must be public (as in interface MyInterface) …
]]>
  </screen>
 </example>
 <note>
  <simpara>
   Od PHP 8.3.0 wariancja widoczności jest sprawdzana bardziej rygorystycznie.
   Przed tą wersją, widoczność stałej klasy mogła być inna
   od widoczności tej stałej w zaimplementowanym interfejsie.
  </simpara>
 </note>
 <example>
  <title>Składnia pobierania stałej klasy, od PHP 8.3.0</title>
  <programlisting role="php">
   <![CDATA[
<?php
class Foo {
    public const BAR = 'bar';
    private const BAZ = 'baz';
}

$name = 'BAR';
echo Foo::{$name}, PHP_EOL; // bar
?>
]]>
  </programlisting>
 </example>
 <note>
  <para>
   Od PHP 8.3.0 stałe klas mogą być pobierane dynamicznie przy użyciu
   zmiennej.
  </para>
 </note>
 <example>
  <title>Przypisywanie typów do stałych w klasach (od PHP 8.3.0)</title>
  <programlisting role="php">
   <![CDATA[
<?php

class MyClass {
    public const bool MY_BOOL = true;
    public const int MY_INT = 1;
    public const float MY_FLOAT = 1.01;
    public const string MY_STRING = 'one';
    public const array MY_ARRAY = [self::MY_BOOL, self::MY_INT, self::MY_FLOAT, self::MY_STRING];
}

var_dump(MyClass::MY_BOOL);
var_dump(MyClass::MY_INT);
var_dump(MyClass::MY_FLOAT);
var_dump(MyClass::MY_STRING);
var_dump(MyClass::MY_ARRAY);
?>
]]>
  </programlisting>
  &example.outputs.83;
  <screen>
<![CDATA[
bool(true)
int(1)
float(1.01)
string(3) "one"
array(4) {
  [0]=>
  bool(true)
  [1]=>
  int(1)
  [2]=>
  float(1.01)
  [3]=>
  string(3) "one"
}
   ]]>
  </screen>
 </example>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
