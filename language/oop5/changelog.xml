<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 6a3ce2f9a191ad00fdd709c249e6dea16df316e3 Maintainer: sobak Status: ready -->
<sect1 xml:id="language.oop5.changelog" xmlns="http://docbook.org/ns/docbook">
 <title>Wykaz zmian dla modelu OOP</title>
 <para>
  Tutaj znajdziesz wykaz zmian w modelu obiektowym PHP. Opis i inne informacje na temat
  tych funkcjonalności są opisane w dokumentacji modelu obiektowego.
 </para>
 <para>
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.4.0</entry>
      <entry>
       Dodano: wsparcie dla <link linkend="language.oop5.property-hooks">Property Hooks</link>.
      </entry>
     </row>
     <row>
      <entry>8.4.0</entry>
      <entry>
       Dodano: wsparcie dla <link linkend="language.oop5.lazy-objects">leniwych obiektów</link>.
      </entry>
     </row>
     <row>
      <entry>8.1.0</entry>
      <entry>
       Dodano: wsparcie dla modyfikatora <modifier>final</modifier> dla stałych w klasach. Ponadto domyślnie można nadpisywać stałe zdefiniowane w interfejsach.
      </entry>
     </row>
     <row>
      <entry>8.0.0</entry>
      <entry>
       Dodano: wsparcie dla <link linkend="language.oop5.basic.nullsafe">operatora nullsafe</link> <emphasis>?-&gt;</emphasis> do dostępu do właściwości i metod na obiektach, które mogą być nullem.
      </entry>
     </row>
     <row>
      <entry>7.4.0</entry>
      <entry>
       Zmieniono: od teraz możliwe jest rzucenie wyjątku z wewnątrz metody
       <function>__toString</function>.
      </entry>
     </row>
     <row>
      <entry>7.4.0</entry>
      <entry>
       Dodano: wsparcie dla ograniczonej kowariancji zwracanych typów oraz
       kontrawariancji typów argumentów Pełna obsługa wariancji jest dostępna
       tylko, jeśli użyty jest autoloading. Wewnątrz pojedynczego pliku możliwe
       są tylko odwołania niecykliczne.
      </entry>
     </row>
     <row>
      <entry>7.4.0</entry>
      <entry>
       Dodano: można teraz określać typ dla właściwości klas.
      </entry>
     </row>
     <row>
      <entry>7.3.0</entry>
      <entry>
       Brak kompatybilności: odpakowywanie argumentów obiektów
       <classname>Traversable</classname> z kluczami innymi niż &integer; nie jest już
       obsługiwane. To zachowanie nie było zamierzone, a więc zostało usunięte.
      </entry>
     </row>
     <row>
      <entry>7.3.0</entry>
      <entry>
       Brak kompatybilności: w poprzednich wersjach możliwe było oddzielenie
       właściwości statycznych przez przypisanie referencji. Zostało to usunięte.
      </entry>
     </row>
     <row>
      <entry>7.3.0</entry>
      <entry>
       Zmieniono: operator <link linkend="language.operators.type">instanceof</link>
       obsługuje teraz literały jako pierwszy operand, a w takim wypadku
       wynikiem jest zawsze &false;.
      </entry>
     </row>
     <row>
      <entry>7.2.0</entry>
      <entry>
       Przestarzałe: funkcja <function>__autoload</function> została uznana
       za przestarzałą na rzecz <function>spl_autoload_register</function>.
      </entry>
     </row>
     <row>
      <entry>7.2.0</entry>
      <entry>
       Zmieniono: następująca nazwa nie może być już użyta jako nazwa klas, interfejsów
       ani traitów: <literal>object</literal>.
      </entry>
     </row>
     <row>
      <entry>7.2.0</entry>
      <entry>
       Zmieniono: przy grupowej składni deklaracji use dla przestrzeni nazw
       można teraz użyć przecinka na końcu listy.
      </entry>
     </row>
     <row>
      <entry>7.2.0</entry>
      <entry>
       Zmieniono: rozszerzanie typów parametrów. Typy parametrów z nadpisanych
       metod oraz z implementacji interfejsów mogą być teraz pominięte.
      </entry>
     </row>
     <row>
      <entry>7.2.0</entry>
      <entry>
       Zmieniono: metody abstrakcyjne mogą teraz zostać nadpisane jeśli klasa abstrakcyjna
       rozszerza inną klasę abstrakcyjną.
      </entry>
     </row>
     <row>
      <entry>7.1.0</entry>
      <entry>
       Zmieniono: następujące nazwy nie mogą być już użyta jako nazwy klas, interfejsów
       ani traitów: <literal>void</literal>, <literal>iterable</literal>
      </entry>
     </row>
     <row>
      <entry>7.1.0</entry>
      <entry>
       Dodano: od teraz możliwe jest określenie
       <link linkend="language.oop5.visiblity-constants">widoczności
        stałych w klasach</link>.
      </entry>
     </row>
     <row>
      <entry>7.0.0</entry>
      <entry>
       Przestarzałe: <link linkend="language.oop5.static">statyczne</link> wywołania
       metod, które nie są zadeklarowane jako statyczne.
      </entry>
     </row>
     <row>
      <entry>7.0.0</entry>
      <entry>
       Przestarzałe: <link linkend="language.oop5.decon">
       konstruktory</link> w stylu PHP, tj. metody, które mają taką samą nazwę jak klasa,
       w której są zdefiniowane.
      </entry>
     </row>
     <row>
      <entry>7.0.0</entry>
      <entry>
       Dodano: grupowane deklaracje <emphasis>use</emphasis>: klasy, funkcje
       oraz stałe importowane z tej samej przestrzeni nazw mogą być teraz grupowane
       razem przy użyciu jednego wyrażenia use.
      </entry>
     </row>
     <row>
      <entry>7.0.0</entry>
      <entry>
       Dodano: wsparcie dla
       <link linkend="language.oop5.anonymous">klas anonimowych</link>
       przy użyciu <literal>new class</literal>.
      </entry>
     </row>
     <row>
      <entry>7.0.0</entry>
      <entry>
       Brak kompatybilności: iterowanie po obiekcie innym niż <classname>Traversable</classname>
       będzie działać teraz tak jak iterowanie po tablicach przekazanych przez
       referencję.
      </entry>
     </row>
     <row>
      <entry>7.0.0</entry>
      <entry>
       Zmieniono: zdefiniowane (kompatybilnych) właściwości w dwóch użytych
       <link linkend="language.oop5.traits">traitach</link> nie powoduje
       już błędu.
      </entry>
     </row>
     <row>
      <entry>5.6.0</entry>
      <entry>
       Dodano: metodę <link linkend="object.debuginfo">__debugInfo()</link>.
      </entry>
     </row>
     <row>
      <entry>5.5.0</entry>
      <entry>
       Dodano: stałą magiczną <link linkend="language.oop5.basic.class.class">::class</link>.
      </entry>
     </row>
     <row>
      <entry>5.5.0</entry>
      <entry>
       Dodano: <link linkend="language.exceptions">finally</link> dla obsługi wyjątków.
      </entry>
     </row>
     <row>
      <entry>5.4.0</entry>
      <entry>
       Dodano: <link linkend="language.oop5.traits">traity</link>.
      </entry>
     </row>
     <row>
      <entry>5.4.0</entry>
      <entry>
       Zmieniono jeśli klasa <link linkend="language.oop5.abstract">abstrakcyjna</link>
       określa sygnaturę dla <link linkend="language.oop5.decon">
       konstruktora</link>, to będzie ona teraz wymuszana.
      </entry>
     </row>
     <row>
      <entry>5.3.3</entry>
      <entry>
       Zmieniono: metody o takiej samej nazwie jak ostatni element
       przestrzeni nazw nie są już traktowane jako <link
       linkend="language.oop5.decon">konstruktory</link>. Ta zmiana nie ma
       wpływu na klasy bez przestrzeni nazw.
      </entry>
     </row>
     <row>
      <entry>5.3.0</entry>
      <entry>
       Zmieniono: klasy, które implementują interfejsy z metodami, które mają domyslne
       wartości w prototypie nie muszą już używać wartości domyślnych takich jak
       interfejs.
      </entry>
     </row>
     <row>
      <entry>5.3.0</entry>
      <entry>
       Zmieniono; możliwe jest teraz odniesienie się do klasy używając zmiennej (np.
       <literal>echo $nazwaKlasy::STALA;</literal>).
       Wartość zmiennej nie może być słowem kluczowym (np., <literal>self</literal>,
       <literal>parent</literal> czy <literal>static</literal>).
      </entry>
     </row>
     <row>
      <entry>5.3.0</entry>
      <entry>
       Zmieniono: od teraz emitowany jest błąd <constant>E_WARNING</constant> jeśli
       magiczne metody <link linkend="language.oop5.overloading">przeciążające</link>
       są zadeklarowane jako <link linkend="language.oop5.static">statyczne</link>.
       Wymusza to też publiczną widoczność tych metod.
      </entry>
     </row>
     <row>
      <entry>5.3.0</entry>
      <entry>
       Zmieniono: przed 5.3.0 wyjątki rzucone w funkcji
       <function>__autoload</function> nie mogły być
       złapane blokiem <link linkend="language.exceptions">catch</link> i
       skutkowały błędem krytycznym. Od teraz wyjątki rzucone w funkcji __autoload
       mogą być złapane blokiem <link linkend="language.exceptions">catch</link> pod
       jednym warunkiem: jeżeli rzucany jest własny wyjątek, to klasa własnego wyjątku musi
       być dostępna. Funkcja __autoload może być użyta rekurencyjnie, aby automatycznie załadować
       klasę własnego wyjątku.
      </entry>
     </row>
     <row>
      <entry>5.3.0</entry>
      <entry>
       Dodano: metodę <link linkend="language.oop5.overloading">__callStatic</link>.
      </entry>
     </row>
     <row>
      <entry>5.3.0</entry>
      <entry>
       Dodano wsparcie <link linkend="language.types.string.syntax.heredoc">heredoc</link>
       oraz <link linkend="language.types.string.syntax.nowdoc">nowdoc</link>
       dla stałych w klasach oraz definicji właściwości.
       Uwaga: wartości heredoc muszą przestrzegać takich samych reguł jak ciągi znaków w
       cudzysłowie (np. brak użycia zmiennych wewnątrz nich).
      </entry>
     </row>
     <row>
      <entry>5.3.0</entry>
      <entry>
       Dodano: <link linkend="language.oop5.late-static-bindings">Late Static Binding</link>.
      </entry>
     </row>
     <row>
      <entry>5.3.0</entry>
      <entry>
       Dodano: metodę <link linkend="object.invoke">__invoke()</link>.
      </entry>
     </row>
     <row>
      <entry>5.2.0</entry>
      <entry>
       Zmieniono: metoda <link linkend="object.tostring">__toString()</link>
       była wywoływana tylko, gdy została użyta bezpośrednio z
       <function>echo</function> lub <function>print</function>.
       Teraz jest wywoływana w dowolnym kontekście typu &string; (np. w
       funkcji <function>printf</function> z modyfikatorem <literal>%s</literal>), ale nie
       w kontekście innych typów (np. nie z modyfikatorem <literal>%d</literal>).
       Od PHP 5.2.0 konwertowanie obiektów bez metody <link linkend="object.tostring">__toString</link>
       na typ &string; wywołuje błąd o poziomie <constant>E_RECOVERABLE_ERROR</constant>.
      </entry>
     </row>
     <row>
      <entry>5.1.3</entry>
      <entry>
       Zmieniono: w poprzednich wersja PHP 5 użycie <literal>var</literal>
       było uznane za przestarzałe i powodowało komunikat o poziomie <constant>E_STRICT</constant>.
       Już nie jest uznane za przestarzałe, a więc nie wywołuje żadnych błędów.
      </entry>
     </row>
     <row>
      <entry>5.1.0</entry>
      <entry>
       Zmieniono metoda statyczna <link linkend="object.set-state">__set_state()</link>
       jest teraz wywoływana dla klas eksportowanych przez <function>var_export</function>.
      </entry>
     </row>
     <row>
      <entry>5.1.0</entry>
      <entry>
       Dodano: metody <link linkend="object.isset">__isset()</link>
       i <link linkend="object.unset">__unset()</link> methods.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </para>
</sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
