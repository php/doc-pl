<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: c1f37a6c270aadbbb3da56a3973ffd62197adf2b Maintainer: sobak Status: ready -->
 <sect1 xml:id="language.oop5.autoload" xmlns="http://docbook.org/ns/docbook">
  <title>Autoloading klas</title>
  <para>
   Wielu programistów tworzących aplikacje obiektowe tworzy
   osobny plik PHP dla każdej z klas. Jednym z największych
   problemów jest wtedy konieczność pisania długiej listy plików do dołączenia
   na początku każdego skryptu (po jednym dla każdej klasy).
  </para>
  <para>
   Funkcja <function>spl_autoload_register</function> może zarejestrować dowolną ilość
   autoloaderów (funkcji ładujących), pozwalając na automatyczne ładowanie klas i interfejsów,
   jeśli nie są one obecnie zdefiniowane. Rejestrując autoloader, PHP dostaje
   ostatnią szansę na załadowanie klasy lub interfejsu zanim ich brak poskutkuje błędem.
  </para>
  <para>
   Wszystkie konstrukcje podobne do klas również mogą korzystać z autoloadingu. W tym klasy,
   interfejsy, traity i enumeracje.
  </para>
  <caution>
   <para>
    Przed PHP 8.0.0 możliwe było użycie funkcji <function>__autoload</function>
    aby automatycznie ładować klasy i interfejsy. Jednak jako mniej elastyczna
    alternatywa dla <function>spl_autoload_register</function> funkcja
    <function>__autoload</function> została uznana za przestarzałą od PHP 7.2.0 i usunięta
    w PHP 8.0.0.
   </para>
  </caution>
  <note>
   <para>
    <function>spl_autoload_register</function> można wywołać wielokrotnie, aby
    zarejestrować wiele autoloaderów. Jednak rzucenie wyjątku z funkcji ładującej
    przerwie ten proces i nie pozwoli uruchomić się kolejnym funkcjom
    ładującym. Z tego powodu rzucanie wyjątków z funkcji ładujących jest stanowczo
    odradzane.
   </para>
  </note>
  <para>
   <example>
    <title>Przykład autoloadingu</title>
    <para>
     W tym przykładzie próbujemy załadować klasy <literal>MojaKlasa1</literal>
     i <literal>MojaKlasa2</literal> z plików <filename>MojaKlasa1.php</filename>
     and <filename>MojaKlasa2.php</filename>.
    </para>
    <programlisting role="php" annotations="interactive">
<![CDATA[
<?php
spl_autoload_register(function ($class_name) {
    include $class_name . '.php';
});

$obj  = new MojaKlasa1();
$obj2 = new MojaKlasa2(); 
?>
]]>
    </programlisting>
   </example>
   <example>
    <title>Inny przykład autoloadingu</title>
    <para>
     W tym przykładzie próbujemy załadować interfejs <literal>ITest</literal>.
    </para>
    <programlisting role="php">
<![CDATA[
<?php

spl_autoload_register(function ($name) {
    var_dump($name);
});

class Foo implements ITest {
}

/*
string(5) "ITest"

Fatal error: Interface 'ITest' not found in ...
*/
?>
]]>
    </programlisting>
   </example>
   <example>
    <title>Używanie autoloadingu Composera</title>
    <simpara>
     &link.composer; generuje <literal>vendor/autoload.php</literal>,
     który automatycznie ładuje paczki zarządzane przez
     Composera. Dołączając ten plik można używać tych paczek bez
     żadnych dodatkowych wymagań.
    </simpara>
    <programlisting role="php" annotations="interactive">
     <![CDATA[
<?php
require __DIR__ . '/vendor/autoload.php';

$uuid = Ramsey\Uuid\Uuid::uuid7();

echo "Wygenerowano nowy UUID -> ", $uuid->toString(), "\n";
?>
]]>
    </programlisting>
   </example>
  </para>

  <simplesect role="seealso">
   &reftitle.seealso;
   <para>
    <simplelist>
     <member><function>unserialize</function></member>
     <member><link linkend="ini.unserialize-callback-func">unserialize_callback_func</link></member>
     <member><link linkend="ini.unserialize-max-depth">unserialize_max_depth</link></member>
     <member><function>spl_autoload_register</function></member>
     <member><function>spl_autoload</function></member>
     <member><function>__autoload</function></member>
    </simplelist>
   </para>
  </simplesect>

 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
