<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: c1f37a6c270aadbbb3da56a3973ffd62197adf2b Maintainer: sobak Status: ready -->
 <sect1 xml:id="language.oop5.decon" xmlns="http://docbook.org/ns/docbook">
  <title>Konstruktory i destruktory</title>

  <sect2 xml:id="language.oop5.decon.constructor">
   <title>Constructor</title>
   <methodsynopsis xml:id="object.construct">
    <type>void</type><methodname>__construct</methodname>
    <methodparam rep="repeat"><type>mixed</type><parameter>values</parameter><initializer>""</initializer></methodparam>
   </methodsynopsis>
   <para>
    PHP pozwala programistom na określenie metod konstruktora dla klas.
    Klasy, które mają metodą konstruktora, wykonują tę metodę dla każdego
    nowo utworzonego obiektu, więc nadaje się ona dla dowolnej inicjalizacji,
    której może potrzebować obiekt zanim się go użyje.
   </para>
   <note>
    <simpara>
     Konstruktory rodzica nie są wywoływane automatycznie, jeśli klasa potomna określa
     własny konstruktor. Aby wywołać konstruktor rodzica, wymagane
     jest wywołanie <function>parent::__construct</function> w konstruktorze klasy
     potomnej. Jeżeli klasa potomna nie definiuje konstruktora, to wtedy będzie ona
     odziedziczona z klasy rodzica tak jak normalna metoda klasy (chyba, że został
     zadeklarowany jako prywatny).
    </simpara>
   </note>
   <example>
    <title>Konstruktory w dziedziczeniu</title>
    <programlisting role="php">
<![CDATA[
<?php
class KlasaBazowa {
    function __construct() {
        print "Konstruktor w klasie bazowej\n";
    }
}

class KlasaPotomna extends KlasaBazowa {
    function __construct() {
        parent::__construct();
        print "Konstruktor w klasie potomnej\n";
    }
}

class InnaKlasaPotomna extends KlasaBazowa {
    // dziedziczy konstruktor z KlasaBazowa
}

// Wywoła konstruktor w klasie bazowej
$obj = new KlasaBazowa();

// Wywoła konstruktor w klasie bazowej
// Wywoła konstruktor w klasie potomnej
$obj = new KlasaPotomna();

// Wywoła konstruktor w klasie bazowej
$obj = new InnaKlasaPotomna();
?> 
]]>
    </programlisting>
   </example>
   <para>
    W odróżnieniu od innych metod, <link linkend="object.construct">__construct()</link>
    jest wyłączona ze standardowych
    <link linkend="language.oop.lsp">reguł kompatybilności sygnatur</link>
    kiedy jest rozszerzana.
   </para>
   <para>
    Konstruktory są zwyczajnymi metodami, które są wywoływane podczas instancjonowania ich
    odpowiadających obiektów. W związku z tym określają dowolną ilość argumentów, które
    mogą być wymagane, mogą mieć typ i mogą mieć wartość domyślną. Argumenty konstruktora
    są wywoływane przez umieszczenie ich wartości w nawiasach po nazwie klasy.
   </para>
   <example>
    <title>Użycie argumentów konstruktora</title>
    <programlisting role="php">
<![CDATA[
<?php
class Punkt {
    protected int $x;
    protected int $y;

    public function __construct(int $x, int $y = 0) {
        $this->x = $x;
        $this->y = $y;
    }
}

// Przekaż oba parametry.
$p1 = new Punkt(4, 5);
// Przekaż tylko wymagany parametr, $y przyjmie domyślną wartość 0
$p2 = new Punkt(4);
// Użycie nazwanych argumentów (od PHP 8.0.0):
$p3 = new Punkt(y: 5, x: 4);
?>
]]>
    </programlisting>
   </example>
   <para>
    Jeśli klasa nie ma konstruktora lub konstruktor nie ma wymaganych argumentów, nawiasy
    mogą zostać pominięte.
   </para>
   <sect3>
    <title>Stary styl konstruktorów</title>
    <para>
     Przed PHP 8.0.0 klasy w globalnej przestrzeni nazw będą interpretowały metodę nazywającą
     się tak samo jak klasa, jako konstruktor w starym stylu. Ta składnia jest przestarzała
     i jej użycie wywoła błąd <constant>E_DEPRECATED</constant>, ale ta metoda wciąż zostanie wywołana jako konstruktor.
     Jeżeli zdefiniowana została zarówno metoda o takiej samej nazwie oraz
     <link linkend="object.construct">__construct()</link>, to wywołana zostanie
     <link linkend="object.construct">__construct()</link>.
    </para>
    <para>
     W klasach w przestrzeniach nazw lub w dowolnej klasie od PHP 8.0.0 metoda
     nazywająca się tak jak klasa nie ma żadnych specjalnych właściwości.
    </para>
    <para>W nowym kodzie zawsze używaj <link linkend="object.construct">__construct()</link>.
    </para>
   </sect3>
   <sect3 xml:id="language.oop5.decon.constructor.promotion">
    <title>Automatyczne tworzenie właściwości</title>
    <para>
     Od PHP 8.0.0 parametry konstruktora mogą zostać też "wypromowane" tak, aby odnosiły
     się do właściwości obiektu. Bardzo powszechne jest przypisanie parametrów konstruktora do
     właściwości bez wykonywania żadnych dodatkowych działań. Automatyczne tworzenie właściwości
     pozwala na skrócenie kodu w takim wypadku. Przykład powyżej może być przepisany następująco.
    </para>
    <example>
     <title>Użycie automatycznego tworzenia właściwości</title>
     <programlisting role="php">
<![CDATA[
<?php
class Punkt {
    public function __construct(protected int $x, protected int $y = 0) {
    }
}
]]>
     </programlisting>
    </example>
    <para>
     Kiedy argument konstruktora zawiera modyfikator widoczności, PHP zinterpretuje go jako
     zarówno właściwość obiektu oraz argument konstruktora i przypisze wartość argumentu do
     właściwości. Ciało konstruktora może być puste lub może zawierać inne instrukcje.
     Dodatkowe instrukcje zostaną wykonane po przypisaniu wartości argumentów
     do odpowiadających im właściwości.
    </para>
    <para>
     Nie wszystkie argumenty muszą być "wypromowane". Możliwe jest mieszanie promowanych i niepromowanych
     argumentów w dowolnej kolejności. Promowane argumenty nie mają wpływu na kod wywołujący konstruktor.
    </para>
    <note>
     <para>
      Użycie <link linkend="language.oop5.visibility">modyfikatora widoczności</link> (<literal>public</literal>,
      <literal>protected</literal> lub <literal>private</literal>) jest prawdopodobnie sposobem, aby użyć promocji
      właściwości, ale dowolny modyfikator (jak np. <literal>readonly</literal>) będzie miał taki sam efekt.
     </para>
    </note>
    <note>
     <para>
      Właściwości obiektu nie mogą być otypowane jako <type>callable</type> ze względu na niejednoznaczność silnika, którą
      by to wprowadziło. W związku z tym "promowane" argumenty też nie mogą być otypowane jako <type>callable</type>. Każda
      inna <link linkend="language.types.declarations">deklaracja typu</link> jest jednak dozwolona.
     </para>
    </note>
    <note>
     <para>
      Jako że "promowane" właściwości są jednocześnie właściwością oraz parametrem funkcji, odnoszą
      się do nich wszystkie ograniczenia nazewnictwa zarówno dla właściwości, jak i parametrów.
     </para>
    </note>
    <note>
     <para>
      <link linkend="language.attributes">Atrybuty</link> przypisane do
      promowanego argumentu konstruktora będą powielone dla właściwości
      oraz argumentu. Domyślne wartości dla promowanych argumentów konstruktora będą odnosiły się tylko do argumentu, a nie do właściwości.
     </para>
    </note>
   </sect3>

   <sect3 xml:id="language.oop5.decon.constructor.new">
    <title>New w inicjalizatorach</title>
    <para>
     Od PHP 8.1.0 obiekty mogą byc wykorzystane jako domyślne wartości parametrów,
     zmiennych statycznych, globalnych stałych oraz argumentów atrybutów.
     Obiekty można teraz przekazać też do funkcji <function>define</function>.
    </para>
    <note>
     <para>
      Użycie dynamicznej nazwy klasy (lub takiej która nie jest ciągiem znaków) lub klasy anonimowej nie jest dozwolone.
      Wykorzystanie odpakowywania argumentów nie jest dozwolone.
      Użycie niewspieranych wyrażeń jako argumentów nie jest dozwolone.
     </para>
    </note>
    <example>
     <title>Użycie new w inicjalizatorach</title>
     <programlisting role="php" annotations="non-interactive">
<![CDATA[
<?php

// Wszystkie są dozwolone:
static $x = new Foo;

const C = new Foo;
 
function test($param = new Foo) {}
 
#[AnAttribute(new Foo)]
class Test {
    public function __construct(
        public $prop = new Foo,
    ) {}
}

// Nie są dozwolone (błąd czasu kompilacji):
function test(
    $a = new (CLASS_NAME_CONSTANT)(), // dynamiczna nazwa klasy
    $b = new class {}, // klasa anonimowa
    $c = new A(...[]), // odpakowywanie argumentów
    $d = new B($abc), // niewspierane wyrażenie stałe
) {}
?>
]]>
     </programlisting>
    </example>
   </sect3>
   
   <sect3 xml:id="language.oop5.decon.constructor.static">
    <title>Statyczne metody tworzące</title>
    <para>
     PHP obsługuje tylko jeden konstruktor dla klasy. W niektórych przypadkach może być jednak
     pożądane aby obiekt mógł być stworzony na różne sposoby, przy użyciu różnych danych wejściowych.
     Zalecanym sposobem na to jest wykorzystanie metod statycznych jako opakowań dla konstruktora.
    </para>
    <example>
     <title>Użycie statycznych metod tworzących</title>
     <programlisting role="php">
<![CDATA[
<?php
$jakis_string_json = '{ "id": 1004, "name": "Elephpant" }';
$jakis_string_xml = "<animal><id>1005</id><name>Elephpant</name></animal>";

class Produkt {

    private ?int $id;
    private ?string $nazwa;

    private function __construct(?int $id = null, ?string $nazwa = null) {
        $this->id = $id;
        $this->nazwa = $nazwa;
    }

    public static function fromBasicData(int $id, string $nazwa): static {
        $new = new static($id, $nazwa);
        return $new;
    }

    public static function fromJson(string $json): static {
        $data = json_decode($json, true);
        return new static($data['id'], $data['nazwa']);
    }

    public static function fromXml(string $xml): static {
        $data = simplexml_load_string($xml);
        $new = new static();
        $new->id = $data->id;
        $new->nazwa = $data->nazwa;
        return $new;
    }
}

$p1 = Produkt::fromBasicData(5, 'Nazwa produktu');
$p2 = Produkt::fromJson($jakis_string_json);
$p3 = Produkt::fromXml($jakis_string_xml);

var_dump($p1, $p2, $p3);
]]>
     </programlisting>
    </example>
    <para>
     Konstruktor może być metodą prywatną lub protected aby zapobiec wywołaniu go z zewnątrz.
     W takim wypadku metoda statyczna będzie w stanie zainicjalizować klasę. Jako, że będą one
     w tej samej klasie, to będą miały dostęp do metod prywatnych, nawet jeśli nie należą one do tej
     samej instancji obiektu. Prywatny konstruktor jest opcjonalny i nie musi mieć sensu w niektórych
     przypadkach.
    </para>
    <para>
     Trzy publiczne metody statyczne reprezentują więc różne sposoby zainicjalizowania obiektu.
    </para>
    <simplelist>
     <member><code>fromBasicData()</code> przyjmuje dokładne wymagane parametry, a następnie tworzy
      obiekt, wywołując konstruktor i zwracając wynik.</member>
     <member><code>fromJson()</code> przyjmuje ciąg JSON i sam wykonuje pewne przetwarzanie,
     aby skonwertować go na format oczekiwany przez konstruktor. Następnie zwraca nowy obiekt.</member>
     <member><code>fromXml()</code> przyjmuje ciąg znaków XML, wstępnie go przetwarza, a potem tworzy
     podstawowy obiekt. Konstruktor jest wciąż wywoływany, ale jako że wszystkie jego parametry są opcjonalne, metoda
     je pomija. Następnie przypisuje wartości bezpośrednio do właściwości obiektu, przed zwróceniem wyniku.</member>
    </simplelist>
    <para>
     We wszystkich trzech przypadkach słowo kluczowe <code>static</code> jest tłumaczone na nazwę klasy, w której jest ten kod.
     W tym wypadku <code>Produkt</code>.
    </para>
   </sect3>
  </sect2>
  <sect2 xml:id="language.oop5.decon.destructor">
   <title>Destruktor</title>
   <methodsynopsis xml:id="object.destruct">
    <type>void</type><methodname>__destruct</methodname>
    <void />
   </methodsynopsis>
   <para>
    PHP posiada koncept destruktorów podobny do tych z innych
    języków obiektowych, takich jak C++. Metoda destruktora będzie
    wywołana kiedy nie będzie już innych referencji do określonego obiektu
    lub w dowolnej kolejności podczas sekwencji wyłączania programu.
   </para>
   <example>
    <title>Destructor Example</title>
    <programlisting role="php">
<![CDATA[
<?php

class MojaKlasaZDestruktorem 
{
    function __construct() {
        print "W konstruktorze\n";
    }

    function __destruct() {
        print "Niszczenie klasy " . __CLASS__ . "\n";
    }
}

$obj = new MojaKlasaZDestruktorem();
 
]]>
    </programlisting>
   </example>
   <para>
    Tak jak przy konstruktorach, destruktory rodziców nie będą wywołane automatycznie
    przez silnik. Aby wywołać destruktor rodzica, należy
    jawnie wywołać <function>parent::__destruct</function> w ciele
    destruktora. Ponownie tak jak przy konstruktorach, klasa potomna odziedziczy
    destruktor rodzica jeżeli nie deklaruje ona własnego.
   </para>
   <para>
    Destruktor będzie wywołany, nawet jeśli wykonanie skryptu jest zatrzymane przy użyciu
    <function>exit</function>. Wywołanie <function>exit</function> w destruktorze
    zapobiegnie wywołaniu pozostałego kodu obsługującego wyłączenie programu.
   </para>
   <para>
    Jeżeli destruktor tworzy nowe referencje do swojego obiektu, to nie będzie on wywołany
    po raz drugi kiedy licznik referencji ponownie osiągnie zero ani podczas
    wyłączania programu.
   </para>
   <para>
    Od PHP 8.4.0 jeśli
    <link linkend="features.gc.collecting-cycles">zbieranie cykli</link>
    odbywa się podczas wykonywania
    <link linkend="language.fibers">Fibera</link>, destruktory obiektów
    zaplanowanych do zbierania są wykonywane w osobnym Fiberze, nazwanym
    <literal>gc_destructor_fiber</literal>.
    Jeżeli ten Fiber jest zawieszony, zostanie stworzony nowy aby wykonać wszystkie
    pozostałe destruktory.
    Poprzedni <literal>gc_destructor_fiber</literal> nie będzie już
    używany przez garbage collector i może zostać zebrany jeśli nie ma
    już do niego innych referencji.
    Obiekty, których destruktory są zawieszone, nie będą zebrane, dopóki
    destruktor nie zwróci wartości lub dopóki nie zostanie zebrany sam Fiber.
   </para>
   <note>
    <para>
     Destruktory wywołane podczas wyłączania skryptu mają już wysłane nagłówki
     HTTP. Katalog roboczy w fazie wyłączania skryptu może być różny w
     niektórych SAPI (np. Apache).
    </para>
   </note>
   <note>
    <para>
     Próba rzucenia wyjątku z destruktora (rzuconego w czasie
     zakańczania skryptu) powoduje błąd krytyczny.
    </para>
   </note>
  </sect2>

 </sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
