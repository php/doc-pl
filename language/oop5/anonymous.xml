<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: d6f54016d62904cfd8200604aadd5e3f0d9bad97 Maintainer: sobak Status: ready -->
<sect1 xml:id="language.oop5.anonymous" xmlns="http://docbook.org/ns/docbook">
 <title>Klasy anonimowe</title>

 <para>
  Klasy anonimowe są przydatne gdy chcemy stworzyć proste i jednorazowo używane obiekty.
 </para>

 <informalexample>
  <programlisting role="php">
<![CDATA[
<?php

// Użycie jawnej klasy
class Logger
{
    public function log($msg)
    {
        echo $msg;
    }
}

$util->setLogger(new Logger());

// Użycie klasy anonimowej
$util->setLogger(new class {
    public function log($msg)
    {
        echo $msg;
    }
});
]]>
  </programlisting>
 </informalexample>

 <para>
  Klasy anonimowe mogą przyjmować argumenty przez konstruktor, rozszerzać inne klasy,
  implementować interfejsy i korzystać z traitów, tak jak normalne klasy:
 </para>

 <informalexample>
  <programlisting role="php">
<![CDATA[
<?php

class InnaKlasa {}
interface JakisInterfejs {}
trait JakisTrait {}

var_dump(new class(10) extends SomeClass implements JakisInterfejs {
    private $num;

    public function __construct($num)
    {
        $this->num = $num;
    }

    use JakisTrait;
});
]]>
  </programlisting>
  &example.outputs;
  <screen>
<![CDATA[
object(class@anonymous)#1 (1) {
  ["Command line code0x104c5b612":"class@anonymous":private]=>
  int(10)
}
]]>
  </screen>
 </informalexample>

 <para>
  Zagnieżdżenie klasy anonimowej w innej klasie nie daje jej dostępu do
  metod lub właściwości, które są oznaczone jako prywatne lub protected w tej okalającej klasie.
  Aby użyć właściwości lub metod protected z
  klasy okalającej, klasa anonimowa
  może rozszerzać klasę okalającą. Aby użyć właściwości prywatnych
  klasy okalającej, należy je przekazać przez konstruktor
  klasy anonimowej:
 </para>

 <informalexample>
  <programlisting role="php">
<![CDATA[
<?php

class Okalajaca
{
    private $prop = 1;
    protected $prop2 = 2;

    protected function func1()
    {
        return 3;
    }

    public function func2()
    {
        return new class($this->prop) extends Outer {
            private $prop3;

            public function __construct($prop)
            {
                $this->prop3 = $prop;
            }

            public function func3()
            {
                return $this->prop2 + $this->prop3 + $this->func1();
            }
        };
    }
}

echo (new Okalajaca)->func2()->func3();
]]>
  </programlisting>
  &example.outputs;
  <screen>
<![CDATA[
6
]]>
  </screen>
 </informalexample>

 <para>
  Wszystkie obiekty utworzone z tej samej deklaracji klasy anoniomwej są instancjami
  tej samej klasy.
 </para>

 <informalexample>
  <programlisting role="php">
<![CDATA[
<?php
function anonymous_class()
{
    return new class {};
}

if (get_class(anonymous_class()) === get_class(anonymous_class())) {
    echo 'ta sama klasa';
} else {
    echo 'inna klasa';
}]]>
 </programlisting>
 &example.outputs;
 <screen>
<![CDATA[
ta sama klasa
]]>
  </screen>
 </informalexample>

 <note>
  <para>
   Zauważ, że nazwy klas anonimowych są przypisywane przez silnik PHP, jak
   pokazano w poniższym przykładzie. Te nazwy są uznawane za
   detal implementacyjny i nie powinno się na nich polegać.
  </para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
echo get_class(new class {});
]]>
  </programlisting>
  &example.outputs.similar;
  <screen>
<![CDATA[
class@anonymous/in/oNi1A0x7f8636ad2021
]]>
   </screen>
  </informalexample>
 </note>

 <sect2 xml:id="language.oop5.anonymous.readonly">
  <title>Klasy anonimowe readonly</title>
  <simpara>
   Od PHP 8.3.0 modyfikator <literal>readonly</literal> można
   stosować z klasami anonimowymi.
  </simpara>
  <example xml:id="language.oop5.anonymous.readonly.example">
   <title>Deklarowanie klasy anonimowej jako readonly</title>
   <programlisting role="php">
    <![CDATA[
<?php
// Użycie klasy anonimowej
var_dump(new readonly class('[DEBUG]') {
    public function __construct(private string $prefix)
    {
    }

    public function log($msg)
    {
        echo $this->prefix . ' ' . $msg;
    }
});
]]>
   </programlisting>
  </example>
 </sect2>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
