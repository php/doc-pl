<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 16934048f79c6e117cd16a23c09c1b2ea502e284	 Maintainer: sobak Status: ready -->
<sect1 xml:id="language.operators.comparison">
 <title>Operatory porównania</title>
 <titleabbrev>Porównania</titleabbrev>
 <simpara>
  Operatory porównania, jak wskazuje ich nazwa, pozwalają na porównanie
  dwóch wartości. Możesz też zapoznać się z
  <link linkend="types.comparisons">tabelami porównań typów</link>,
  które pokazują przykłady różnych porównań związanych z typami danych.
 </simpara>
 <table>
  <title>Operatory porównania</title>
  <tgroup cols="3">
   <thead>
    <row>
     <entry>Przykład</entry>
     <entry>Nazwa</entry>
     <entry>Wynik</entry>
    </row>
   </thead>
   <tbody>
    <row>
     <entry>$a == $b</entry>
     <entry>Równe</entry>
     <entry>&true; jeśli <varname>$a</varname> jest równa <varname>$b</varname> po dopasowaniu typów.</entry>
    </row>
    <row>
     <entry>$a === $b</entry>
     <entry>Identyczne</entry>
     <entry>
      &true; jeśli <varname>$a</varname> jest równa <varname>$b</varname> i obie są tego samego
      typu.
     </entry>
    </row>
    <row>
     <entry>$a != $b</entry>
     <entry>Różne</entry>
     <entry>&true; jeśli <varname>$a</varname> nie jest równa <varname>$b</varname> po dopasowaniu typów.</entry>
    </row>
    <row>
     <entry>$a &lt;&gt; $b</entry>
     <entry>Różne</entry>
     <entry>&true; jeśli <varname>$a</varname> nie jest równa <varname>$b</varname> po dopasowaniu typów.</entry>
    </row>
    <row>
     <entry>$a !== $b</entry>
     <entry>Nieidentyczne</entry>
     <entry>
      &true; jeśli <varname>$a</varname> nie jest równa <varname>$b</varname> lub nie są one tego samego
      typu.
     </entry>
    </row>
    <row>
     <entry>$a &lt; $b</entry>
     <entry>Mniejsza niż</entry>
     <entry>&true; jeśli <varname>$a</varname> jest mniejsza niż <varname>$b</varname>.</entry>
    </row>
    <row>
     <entry>$a &gt; $b</entry>
     <entry>Większa niż</entry>
     <entry>&true; jeśli <varname>$a</varname> większa niż <varname>$b</varname>.</entry>
    </row>
    <row>
     <entry>$a &lt;= $b</entry>
     <entry>Mniejsza lub równa</entry>
     <entry>&true; jeśli <varname>$a</varname> jest mniejsza lub równa <varname>$b</varname>.</entry>
    </row>
    <row>
     <entry>$a &gt;= $b</entry>
     <entry>Większa lub równa</entry>
     <entry>&true; jeśli <varname>$a</varname> jest większa lub równa <varname>$b</varname>.</entry>
    </row>
    <row>
     <entry>$a &lt;=&gt; $b</entry>
     <entry>Statek kosmiczny (ang. <literal>spaceship operator</literal>)</entry>
     <entry>
      Liczba całkowita (<type>int</type>) kolejno mniejsza, równa lub większa niż zero, gdy
      <varname>$a</varname> jest mniejsza niż, równa lub większa od
      <varname>$b</varname>.
     </entry>
    </row>
   </tbody>
  </tgroup>
 </table>
 <para>
  Jeżeli oba argumenty (operandy) są
  <link linkend="language.types.numeric-strings">numerycznymi ciągami znaków</link>
  lub jeden operand jest liczbą a drugi jest
  <link linkend="language.types.numeric-strings">numerycznym ciągiem znaków</link>,
  to porównanie jest dokonywane numerycznie.
  Te reguły odnoszą się także do wyrażeń
  <link linkend="control-structures.switch">switch</link>.
  Konwersja typów nie następuje dla porównań
  <literal>===</literal> or <literal>!==</literal>, które
  poza wartością porównują także typ.
 </para>

 <warning>
  <para>
   Przed PHP 8.0.0, jeśli ciąg znaków (<type>string</type>) porównywany był do liczby
   lub numerycznego ciągu znaków, to <type>string</type> był konwertowany
   do liczby przed dokonaniem porównania. Może to skutkować niespodziewanymi
   wynikami, jak pokazano w następującym przykładzie:
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
var_dump(0 == "a");
var_dump("1" == "01");
var_dump("10" == "1e1");
var_dump(100 == "1e2");

switch ("a") {
case 0:
    echo "0";
    break;
case "a":
    echo "a";
    break;
}
?>
]]>
    </programlisting>
    &example.outputs.7;
    <screen>
<![CDATA[
bool(true)
bool(true)
bool(true)
bool(true)
0
]]>
    </screen>
    &example.outputs.8;
    <screen>
<![CDATA[
bool(false)
bool(true)
bool(true)
bool(true)
a
]]>
    </screen>
   </informalexample>
  </para>
 </warning>

 <para>
  <example>
   <title>Operatory porównania</title>
   <programlisting role="php">
<![CDATA[
<?php
// Liczby całkowite
echo 1 <=> 1, ' '; // 0
echo 1 <=> 2, ' '; // -1
echo 2 <=> 1, ' '; // 1

// Liczy zmiennoprzecinkowe
echo 1.5 <=> 1.5, ' '; // 0
echo 1.5 <=> 2.5, ' '; // -1
echo 2.5 <=> 1.5, ' '; // 1

// Ciągi znaków
echo "a" <=> "a", ' '; // 0
echo "a" <=> "b", ' '; // -1
echo "b" <=> "a", ' '; // 1

echo "a" <=> "aa", ' ';  // -1
echo "zz" <=> "aa", ' '; // 1

// Tablice
echo [] <=> [], ' ';               // 0
echo [1, 2, 3] <=> [1, 2, 3], ' '; // 0
echo [1, 2, 3] <=> [], ' ';        // 1
echo [1, 2, 3] <=> [1, 2, 1], ' '; // 1
echo [1, 2, 3] <=> [1, 2, 4], ' '; // -1

// Obiekty
$a = (object) ["a" => "b"];
$b = (object) ["a" => "b"];
echo $a <=> $b, ' '; // 0

$a = (object) ["a" => "b"];
$b = (object) ["a" => "c"];
echo $a <=> $b, ' '; // -1

$a = (object) ["a" => "c"];
$b = (object) ["a" => "b"];
echo $a <=> $b, ' '; // 1

// porównywane są nie tylko wartości, klucze też muszą się zgadzać
$a = (object) ["a" => "b"];
$b = (object) ["b" => "b"];
echo $a <=> $b, ' '; // 1

?>
]]>

   </programlisting>
  </example>
 </para>

 <para>
  Dla poszczególnych typów konwersja jest wykonywana zgodnie z tabelą
  poniżej (w kolejności):
 </para>
 <table xml:id="language.operators.comparison.types">
  <title>Porównania z różnymi typami</title>
  <tgroup cols="3">
   <thead>
    <row>
     <entry>Typ operandu 1</entry>
     <entry>Typ operandu 2</entry>
     <entry>Wynik</entry>
    </row>
   </thead>
   <tbody>
    <row>
     <entry><type>null</type> lub <type>string</type></entry>
     <entry><type>string</type></entry>
     <entry>Konwertuje &null; do "", porównanie numeryczne lub leksykalne</entry>
    </row>
    <row>
     <entry><type>bool</type> lub <type>null</type></entry>
     <entry>dowolny</entry>
     <entry>Konwertuje obie strony na <type>bool</type>, &false; &lt; &true;</entry>
    </row>
    <row>
     <entry><type>object</type></entry>
     <entry><type>object</type></entry>
     <entry>Wbudowane klasy mogą określać swoje własne reguły porównań, różne klasy
      nie są porównywalne, dla takich samych klas zobacz rozdział <link
       linkend="language.oop5.object-comparison">Porównania obiektów</link>
     </entry>
    </row>
    <row>
     <entry><type>string</type>, <type>resource</type>, <type>int</type> lub <type>float</type></entry>
     <entry><type>string</type>, <type>resource</type>, <type>int</type> lub <type>float</type></entry>
     <entry>Przetwórz ciągi znaków i zasoby na liczby, standardowe porównanie matematyczne</entry>
    </row>
    <row>
     <entry><type>array</type></entry>
     <entry><type>array</type></entry>
     <entry>Tablica z mniejszą ilością elementów jest uznawana za mniejszą, jeśli klucz z argumentu 1 nie
      został znaleziony w argumencie 2, to tablice nie są porównywalne. W przeciwnym wypadku porównuje wartość
      po wartości (zobacz przykład poniżej)</entry>
    </row>
    <row>
     <entry><type>object</type></entry>
     <entry>dowolny</entry>
     <entry>Obiekt jest zawsze uznawany za większy</entry>
    </row>
    <row>
     <entry><type>array</type></entry>
     <entry>dowolny</entry>
     <entry>Tablica jest zawsze uznawana za większą</entry>
    </row>
   </tbody>
  </tgroup>
 </table>

 <para>
  <example>
   <title>Porównania typów boolean/null</title>
   <programlisting role="php">
<![CDATA[
<?php
// Typy bool i null są zawsze porównywane jak wartości logiczne
var_dump(1 == TRUE);  // TRUE - tak jak (bool) 1 == TRUE
var_dump(0 == FALSE); // TRUE - tak jak (bool) 0 == FALSE
var_dump(100 < TRUE); // FALSE - tak jak (bool) 100 < TRUE
var_dump(-10 < FALSE);// FALSE - tak jak (bool) -10 < FALSE
var_dump(min(-100, -10, NULL, 10, 100)); // NULL - (bool) NULL < (bool) -100 tj. FALSE < TRUE
?>
]]>
   </programlisting>
  </example>
 </para>

 <para>
  <example>
   <title>Transkrypcja standardowych reguł porównań tablic</title>
   <programlisting role="php" annotations="non-interactive">
<![CDATA[
<?php
// Tablice są porównywane w ten sposób dla standardowych operatorów porównań, a także dla operatora
// statku kosmicznego (<=>, ang. spaceship operator)
function standard_array_compare($op1, $op2)
{
    if (count($op1) < count($op2)) {
        return -1; // $op1 < $op2
    } elseif (count($op1) > count($op2)) {
        return 1; // $op1 > $op2
    }
    foreach ($op1 as $key => $val) {
        if (!array_key_exists($key, $op2)) {
            return 1;
        } elseif ($val < $op2[$key]) {
            return -1;
        } elseif ($val > $op2[$key]) {
            return 1;
        }
    }
    return 0; // $op1 == $op2
}
?>
]]>
   </programlisting>
  </example>
 </para>

 <warning>
  <title>Porównanie liczb zmiennoprzecinkowych</title>

  <para>
   Ze względu na to jak wartości <type>float</type> są przechowywane wewnętrznie,
   nie powinno się sprawdzać czy dwie liczby zmiennoprzecinkowe są równe.
  </para>

  <para>
   Zobacz dokumentację typu <type>float</type> aby dowiedzieć się więcej.
  </para>
 </warning>

 <note>
  <simpara>
   Miej świadomość, że dopasowywanie typów (ang. type juggling) w PHP nie zawsze jest, gdy porównywane są wartości różnych typów,
   szczególnie gdy porównujemy liczby całkowite do wartości logicznych lub liczby do ciągów znaków. W związku z tym
   w większości wypadków zaleca się użycie porównań <literal>===</literal> i <literal>!==</literal> zamiast
   <literal>==</literal> i <literal>!=</literal>.
  </simpara>
 </note>

 <sect2 xml:id="language.operators.comparison.incomparable">
  <title>Nieporównywalne wartości</title>
  <simpara>
   Porównanie identyczności (<literal>===</literal> i <literal>!==</literal>)
   może zostać użyte dla dowolnych wartości, ale pozostałe operatory porównania powinny
   być używane tylko dla porównywalnych wartości. Rezultat porównań nieporównywalnych wartości jest
   niezdefiniowany i nie powinno się na nim polegać.
  </simpara>
 </sect2>

 <sect2 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>strcasecmp</function></member>
    <member><function>strcmp</function></member>
    <member><link linkend="language.operators.array">Operatory tablicowe</link></member>
    <member><link linkend="language.types">Typy</link></member>
   </simplelist>
  </para>
 </sect2>

 <sect2 xml:id="language.operators.comparison.ternary">
  <title>Operator trójkowy</title>
  <para>
   Innym operatorem warunkowym jest operator "?:" (trójkowy), nazywany też wyrażeniem trójkowym.
   <example>
    <title>Przypisywanie wartości domyślnej</title>
    <programlisting role="php">
<![CDATA[
<?php
// Przykład wykorzystania operatora trójkowego
$action = (empty($_POST['action'])) ? 'default' : $_POST['action'];

// Powyższy kod jest równoważny z tym wyrażeniem if/else
if (empty($_POST['action'])) {
    $action = 'default';
} else {
    $action = $_POST['action'];
}
?>
]]>
    </programlisting>
   </example>
   Wyrażenie <literal>(expr1) ? (expr2) : (expr3)</literal>
   jest rozwiązywane do: wykonaj <replaceable>expr2</replaceable> jeśli
   <replaceable>expr1</replaceable> rozwiązuje się do &true;, a do
   <replaceable>expr3</replaceable> jeśli
   <replaceable>expr1</replaceable> rozwiązuje się do &false;.
  </para>
  <para>
   Można pominąć środkową część wyrażenia trójkowego.
   Wyrażenie <literal>expr1 ?: expr3</literal> rozwiązuje się do
   wyniku <replaceable>expr1</replaceable> jeśli <replaceable>expr1</replaceable>
   rozwiązuje się do &true; i do <replaceable>expr3</replaceable> w przeciwnym wypadku.
   W tym wypadku <replaceable>expr1</replaceable> jest wykonywane tylko raz.
  </para>
  <note>
   <simpara>
    Zwróć uwagę, że operator trójkowy nie jest wyrażeniem i nie jest
    rozwiązywany do zmiennej, ale do wyniku wyrażenia. Jest to istotna
    różnica, gdy chcemy zwrócić zmienną przez referencję.
    Wyrażenie <literal>return $var == 42 ? $a : $b;</literal> w funkcji
    zwracającej przez referencję nie zadziała i wygenerowane zostanie
    ostrzeżenie.
   </simpara>
  </note>
  <note>
   <para>
    Zaleca się, aby unikać zagnieżdżania operatorów trójkowych.
    Zachowanie PHP przy użyciu więcej niż jednego operatora trójkowego bez nawiasów w jednym
    wyrażeniu jest nieoczywiste, szczególnie w porównaniu do innych języków.
    Przed PHP 8.0.0 wyrażenia trójkowe były wykonywane jako lewostronnie-asocjacyjne
    zamiast prawostronnie asocjacyjne, jak w większości innych języków.
    Poleganie na lewostronnej asocjacyjności jest uznane za przestarzałe od PHP 7.4.0.
    Od PHP 8.0.0 operator trójkowy nie jest asocjacyjny.
    <example>
     <title>Nieoczywiste zachowanie operatora trójkowego</title>
     <programlisting role="php">
<![CDATA[
<?php
// na pierwszy rzut oka następujący kod zdaje się wyświetlać "true"
echo (true ? 'true' : false ? 't' : 'f');

// jednakże faktycznym wynikiem jest "t" dla PHP przed 8.0.0
// dzieje się tak, gdyż wyrażenia trójkowe są lewostronnie asocjacyjne

// poniżej znajduje się bardziej oczywiste wersja takiego samego kodu jak wyżej
echo ((true ? 'true' : false) ? 't' : 'f');

// tutaj możemy zobaczyć, że pierwsze wyrażenie jest ewaluowane do 'true',
// co z kolei jest równoważne z (bool) true, więc zwracana jest odnoga dla true
// z drugiego wyrażenia trójkowego
?>
]]>
     </programlisting>
    </example>
   </para>
  </note>
  <note>
   <para>
    Z drugiej strony, łączenie skróconych wyrażeń trójkowych (<literal>?:</literal>), jest stabilne i działa rozsądnie.
    W dalszym ciągu zostanie rozwiązane do pierwszego argumentu, który rozwiązuje się do nie-fałszywej wartości logicznej.
    Zwróć uwagę że niezdefiniowane wartości w dalszym ciągu spowodują wygenerowanie ostrzeżenia.
    <example>
     <title>Łączenie skróconych wyrażeń trójkowych</title>
     <programlisting role="php">
<![CDATA[
<?php
echo 0 ?: 1 ?: 2 ?: 3, PHP_EOL; //1
echo 0 ?: 0 ?: 2 ?: 3, PHP_EOL; //2
echo 0 ?: 0 ?: 0 ?: 3, PHP_EOL; //3
?>
]]>
     </programlisting>
    </example>
   </para>
  </note>
 </sect2>

 <sect2 xml:id="language.operators.comparison.coalesce">
  <title>Null Coalescing Operator</title>
  <para>
   Innym przydatnym skróconym operatorem jest "??" (null coalescing operator).
   <example>
    <title>Przypisywanie wartości domyślnej</title>
    <programlisting role="php">
<![CDATA[
<?php
// Przykład wykorzystania Null Coalesce Operator
$action = $_POST['action'] ?? 'default';

// Powyższy kod jest równoważny z tym wyrażeniem if/else
if (isset($_POST['action'])) {
    $action = $_POST['action'];
} else {
    $action = 'default';
}
?>
]]>
    </programlisting>
   </example>
   Wyrażenie <literal>(expr1) ?? (expr2)</literal> rozwiązuje się do
   <replaceable>expr2</replaceable> jeśli <replaceable>expr1</replaceable> jest
   równe &null;, a do <replaceable>expr1</replaceable> w przeciwnym wypadku.
  </para>
  <para>
   Co istotne, ten operator nie powoduje wygenerowania żadnych ostrzeżeń, jeśli wartość
   po lewej stronie nie istnieje, zupełnie tak jak <function>isset</function>. Jest to szczególnie
   przydatne dla kluczy tablic.
  </para>
  <note>
   <simpara>
    Zauważ że null coalescing operator jest wyrażeniem i nie jest
    rozwiązywany do zmiennej, ale do wyniku wyrażenia. Jest to istotna
    różnica, gdy chcemy zwrócić zmienną przez referencję.
    Wyrażenie <literal>return $foo ?? $bar;</literal> w funkcji
    zwracającej przez referencję nie zadziała i wygenerowane zostanie
    ostrzeżenie.
   </simpara>
  </note>
  <note>
   <para>
    Operator "??" ma niski priorytet wykonywania. Oznacza to, że przy połączeniu go
    z innymi operatorami (np. kontatenacją ciągów znaków lub operatorami arytmetycznymi)
    prawdopodobnie będą wymagane nawiasy.
   </para>
   <programlisting role="php">
<![CDATA[
<?php
// Powoduje wygenerowanie ostrzeżenia że $name nie jest zdefiniowana.
print 'Mr. ' . $name ?? 'Anonymous';

// Wyświetla "Mr. Anonymous"
print 'Mr. ' . ($name ?? 'Anonymous');
?>
]]>
   </programlisting>
  </note>
  <note>
   <para>
    Zauważ, że operator "??" pozwala na proste zagnieżdżanie:
    <example>
     <title>Zagnieżdżanie null coalescing operatora</title>
     <programlisting role="php">
<![CDATA[
<?php

$foo = null;
$bar = null;
$baz = 1;
$qux = 2;

echo $foo ?? $bar ?? $baz ?? $qux; // wyświetla 1

?>
]]>
     </programlisting>
    </example>
   </para>
  </note>
 </sect2>
</sect1>
