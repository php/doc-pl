<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 16934048f79c6e117cd16a23c09c1b2ea502e284	 Maintainer: sobak Status: ready -->
<sect1 xml:id="language.operators.type">
 <title>Operatory typów</title>
 <titleabbrev>Typ</titleabbrev>
 <para>
  <literal>instanceof</literal> jest używany, aby określić czy zmienna PHP
  jest obiektem określonej
  <link linkend="language.oop5.basic.class">czy</link>:
  <example>
   <title>Użycie <literal>instanceof</literal> z klasami</title>
   <programlisting role="php">
<![CDATA[
<?php
class MyClass
{
}

class NotMyClass
{
}
$a = new MyClass;

var_dump($a instanceof MyClass);
var_dump($a instanceof NotMyClass);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
bool(true)
bool(false)
]]>
   </screen>
  </example>
 </para>
 <para>
  <literal>instanceof</literal> może być też użyte do określenia czy zmienna
  zawiera obiekt klasy, która dziedziczy z klasy nadrzędnej:
  <example>
   <title>Użycie <literal>instanceof</literal> z klasami dziedziczonymi</title>
   <programlisting role="php">
<![CDATA[
<?php
class ParentClass
{
}

class MyClass extends ParentClass
{
}

$a = new MyClass;

var_dump($a instanceof MyClass);
var_dump($a instanceof ParentClass);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
bool(true)
bool(true)
]]>
   </screen>
  </example>
 </para>
 <para>
  Żeby sprawdzić, czy obiekt <emphasis>nie</emphasis> jest instancją klasy, można użyć
  <link linkend="language.operators.logical">logicznego operatora zaprzeczenia
   (<literal>not</literal>)</link>.
  <example>
   <title>Użycie <literal>instanceof</literal> do sprawdzenia czy obiekt <emphasis>nie</emphasis> jest
    instancją klasy</title>
   <programlisting role="php">
<![CDATA[
<?php
class MyClass
{
}

$a = new MyClass;
var_dump(!($a instanceof stdClass));
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
bool(true)
]]>
   </screen>
  </example>
 </para>
 <para>
  W końcu, <literal>instanceof</literal> można także użyć do określenia, czy
  zmienna zawiera obiekt klasy, który implementuje określony
  <link linkend="language.oop5.interfaces">interfejs</link>:
  <example>
   <title>Użycie <literal>instanceof</literal> z interfejsami</title>
   <programlisting role="php">
<![CDATA[
<?php
interface MyInterface
{
}

class MyClass implements MyInterface
{
}

$a = new MyClass;

var_dump($a instanceof MyClass);
var_dump($a instanceof MyInterface);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
bool(true)
bool(true)
]]>
   </screen>
  </example>
 </para>
 <para>
  Mimo iż <literal>instanceof</literal> jest zwykle używane z dosłownymi nazwami klas,
  można go użyć także z innym obiektem lub zmienną zawierającą ciąg znaków:
  <example>
   <title>Użycie <literal>instanceof</literal> z innymi zmiennymi</title>
   <programlisting role="php">
<![CDATA[
<?php
interface MyInterface
{
}

class MyClass implements MyInterface
{
}

$a = new MyClass;
$b = new MyClass;
$c = 'MyClass';
$d = 'NotMyClass';

var_dump($a instanceof $b); // $b jest obiektem klasy MyClass
var_dump($a instanceof $c); // $c jest ciągiem znaków 'MyClass'
var_dump($a instanceof $d); // $d jest ciągiem znaków 'NotMyClass'
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
bool(true)
bool(true)
bool(false)
]]>
   </screen>
  </example>
 </para>
 <para>
  instanceof nie spowoduje żadnego błędu, jeśli sprawdzana zmienna nie jest
  obiektem, po prostu zwróci &false;. Użycie stałych było z kolei zabronione
  przed PHP 7.3.0.
  <example>
   <title>Użycie <literal>instanceof</literal> do sprawdzenia innych zmiennych</title>
   <programlisting role="php">
<![CDATA[
<?php
$a = 1;
$b = NULL;
$c = fopen('/tmp/', 'r');
var_dump($a instanceof stdClass); // $a jest liczbą
var_dump($b instanceof stdClass); // $b to NULL
var_dump($c instanceof stdClass); // $c jest zasobem
var_dump(FALSE instanceof stdClass);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
bool(false)
bool(false)
bool(false)
PHP Fatal error:  instanceof expects an object instance, constant given
]]>
   </screen>
  </example>
 </para>
 <para>
  Począwszy od PHP 7.3.0 można używać stałych jako lewy argument
  operatora <literal>instanceof</literal>.
  <example>
   <title>Użycie <literal>instanceof</literal> do sprawdzenia stałych</title>
   <programlisting role="php">
<![CDATA[
<?php
var_dump(FALSE instanceof stdClass);
?>
]]>
   </programlisting>
   &example.outputs.73;
   <screen>
<![CDATA[
bool(false)
]]>
   </screen>
  </example>
 </para>
 <para>
  Od PHP 8.0.0 <literal>instanceof</literal> może być użyte z dowolnym wyrażeniem.
  Wyrażenie musi być ujęte w nawiasy i tworzyć wartość typu <type>string</type>.
  <!-- RFC: https://wiki.php.net/rfc/variable_syntax_tweaks -->
  <example>
   <title>Użycie <literal>instanceof</literal> z dowolnym wyrażeniem</title>
   <programlisting role="php">
<![CDATA[
<?php

class ClassA extends \stdClass {}
class ClassB extends \stdClass {}
class ClassC extends ClassB {}
class ClassD extends ClassA {}

function getSomeClass(): string
{
    return ClassA::class;
}

var_dump(new ClassA instanceof ('std' . 'Class'));
var_dump(new ClassB instanceof ('Class' . 'B'));
var_dump(new ClassC instanceof ('Class' . 'A'));
var_dump(new ClassD instanceof (getSomeClass()));
?>
]]>
   </programlisting>
   &example.outputs.8;
   <screen>
<![CDATA[
bool(true)
bool(true)
bool(false)
bool(true)
]]>
   </screen>
  </example>
 </para>
 <simpara>
  Operator <literal>instanceof</literal> występuje też w postaci funkcji:
  <function>is_a</function>.
 </simpara>

 <sect2 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>get_class</function></member>
    <member><function>is_a</function></member>
   </simplelist>
  </para>
 </sect2>
</sect1>
