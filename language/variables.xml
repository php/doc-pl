<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 22583751fbfdaa3eaa41aeb6470d1343f5cb2c78 Maintainer: sobak Status: ready -->
<!-- $Revision$ -->
<!-- CREDITS: garbus, qrak -->
 <chapter xml:id="language.variables" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Zmienne</title>
  
  <sect1 xml:id="language.variables.basics">
   <title>Podstawy</title>

   <simpara>
    Każdą zmienną w PHP zapisuje się, poprzedzając jej nazwę znakiem dolara "$".
    Wielkość liter w nazwie zmiennej jest rozróżniana.
   </simpara>

   <para>
    Poprawna nazwa zmiennej zaczyna się od litery
    (<literal>A-Z</literal>, <literal>a-z</literal> lub bajty od 128 do 255)
    lub znaku podkreślenia,
    po których może wystąpić dowolna ilość liter, cyfr lub znaków podkreślenia.
    Jako wyrażenie regularne, można to zapisać tak:
    <code>^[a-zA-Z_\x80-\xff][a-zA-Z0-9_\x80-\xff]*$</code>
   </para>
   
   <note>
    <simpara>
     PHP nie obsługuje nazw zmiennych w Unikodzie, ale niektóre kodowania
     znaków (takie jak UTF-8) zapisują znaki w taki sposób, że wszystkie bajty
     wielobajtowego znaku mieszczą się w dozwolonym zakresie, a więc są
     poprawną nazwą zmiennej.
    </simpara>
   </note>

   <note>
    <simpara>
     <literal>$this</literal> to specjalna zmienna, do której nie można
     nic przypisać.
     Przed PHP 7.1.0, było możliwe niebezpośrednie przypisanie (np. używając
     <link linkend="language.variables.variable">zmiennych zmiennych</link>).
    </simpara>
   </note>

   &tip.userlandnaming;

   <example>
    <title>Poprawne nazwy zmiennych</title>
    <programlisting role="php">
<![CDATA[
<?php
$zmienna = 'Pan';
$Zmienna = 'Jan';
echo "$zmienna, $Zmienna";  // wyświetla "Pan, Jan"

$7dni = 'tydzień';          // niepoprawna nazwa - zaczyna się od cyfry
$_7dni = 'tydzień';         // poprawna nazwa - zaczyna się znakiem podkreślenia
$jaŹń = 'osobowość';        // poprawna nazwa - "ń" i "Ź" należą do (rozszerzonego) ASCII 228
?>
]]>
    </programlisting>
   </example>

   <example>
    <title>Niepoprawne nazwy zmiennych</title>
    <programlisting role="php">
<![CDATA[
<?php
$7dni = 'tydzień';      // niepoprawna nazwa - zaczyna się od cyfry
]]>
    </programlisting>
   </example>

   <simpara>
    PHP przyjmuje sekwencję dowolnych bajtów jako nazwę zmiennej. Dostęp do
    nazw zmiennych, które nie stosują się do wspomnianych wyżej reguł, może być
    uzyskany tylko dynamicznie w trakcie wykonywania programu. Zobacz sekcję o
    <link linkend="language.variables.variable">zmiennych zmiennych</link>,
    aby dowiedzieć się, jak uzyskać do nich dostęp.
   </simpara>

   <example>
    <title>Accessing obscure variable names</title>
    <programlisting role="php">
     <![CDATA[
<?php
${'invalid-name'} = 'bar';
$name = 'invalid-name';
echo ${'invalid-name'}, " ", $$name;
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
     <![CDATA[
bar bar
]]>
    </screen>
   </example>

   <para>
    Domyślnie, zmienne zawsze są zawsze przypisywane przez wartość. Innymi
    słowy, jeśli do zmiennej zostanie przypisane jakieś wyrażenie, to wartość tego
    wyrażenia zostanie skopiowana do zmiennej. Oznacza to, że po przypisaniu
    wartości jednej zmiennej do drugiej, późniejsza 
    zmiana wartości jednej z nich nie spowoduje zmiany wartości drugiej.
    Więcej informacji na ten temat w
    rozdziale <link 
    linkend="language.expressions">Wyrażenia</link>.
   </para>
   <para>
    PHP oferuje jeszcze jeden sposób przypisywania wartości do zmiennych:
    <link linkend="language.references">przypisanie przez referencję</link>.
    Oznacza to, że nowa zmienna tylko odnosi się (innymi słowy, 
    "staje się aliasem" lub "wskazuje na") do pierwotnej zmiennej. 
    Zmiany wykonane na nowej zmiennej oddziałują także na pierwotną zmienną i vice versa. 
   </para>
   <para>
    Aby przypisać przez referencję, postaw znak ampersand (&amp;)
    przed nazwą zmiennej przypisywanej (zmiennej od której pobierasz
    wartość). Na przykład poniższy kod wyświetla "<literal>To jest 
    PHP</literal>" dwa razy:
    
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$foo = "PHP";               // Przypisz wartość "PHP" do $foo.
$bar = &$foo;               // Przypisz referencyjnie $foo do $bar.
$bar = "To jest $bar";      // Zmień $bar...
echo $bar;
echo $foo;                  // $foo też się zmieniło.
?>
]]>
     </programlisting>
    </informalexample>
   </para>

   <para>
    Należy pamiętać, że tylko zmienne mogą być przypisane
    przez referencję.
    <informalexample>
     <programlisting role="php">
<![CDATA[ 
<?php
$foo = 25;
$bar = &$foo;      // Przypisanie poprawne.
$bar = &(24 * 7);  // Przypisanie niepoprawne - do nienazwanego wyrażenia.

function test()
{
   return 25;
}

$bar = &test();    // Niepoprawne, ponieważ test() nie zwraca zmiennej przez referencję.
?>
]]>
     </programlisting>
    </informalexample>
   </para>
   
   <para>
    W PHP nie jest konieczne deklarowanie zmiennych, jednak jest to bardzo
    dobra praktyka. Dostęp do niezdefiniowanej zmiennej będzie skutkował ostrzeżeniem
    <constant>E_WARNING</constant> (a przed PHP 8.0.0 <constant>E_NOTICE</constant>).
    Niezdefiniowana zmienna ma domyślną wartość &null;.
    Konstrukcja języka <function>isset</function>
    może być użyta do sprawdzenia czy zmienna została już zainicjalizowana.
   </para>
   <para>
    <example>
     <title>Domyślna wartość niezainicjowanych zmiennych</title>
     <programlisting role="php">
<![CDATA[
<?php
// Zmienna bez nadanej wartości ORAZ bez odwołań do niej (brak kontekstu, w jakim została użyta).
var_dump($zmienna_bez_kontekstu_uzycia);
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
Warning: Undefined variable $unset_var in ...
NULL
]]>
     </screen>
    </example>
   </para>

   <simpara>
    PHP pozwala na automatyczne tworzenie nowych tablic
    z niezdefiniowanej zmiennej.
    Dodanie elementu tablicy do niezdefiniowanej zmiennej stworzy nową tablicę
    i nie wygeneruje żadnego ostrzeżenia.
   </simpara>
   <example>
    <title>Automatyczne tworzenie tablicy z niezdefiniowanej zmiennej</title>
    <programlisting role="php">
     <![CDATA[
<?php
$nieustawiona_tablica[] = 'wartość'; // Nie powoduje wygenerowania ostrzeżenia.
?>
]]>
    </programlisting>
   </example>

   <warning>
    <simpara>
     Poleganie na domyślnej wartości niezainicjalizowanej zmiennej jest problematyczne,
     gdy jeden plik jest dołączany w innym, który używa tej samej
     nazwy zmiennej.
    </simpara>
   </warning>

   <simpara>
    Zmienna może być zniszczona przy użyciu konstrukcji języka
    <function>unset</function>.
   </simpara>

   <simpara>
    Aby zapoznać się z informacjami o funkcjach związanych ze zmiennymi, zobacz
    <link linkend="ref.var">Referencję funkcji zmiennych</link>.
   </simpara>
  </sect1>

  <sect1 xml:id="language.variables.predefined">
   <title>Zmienne Predefiniowane</title>

   <para>
    PHP udostępnia pewne
    <link linkend="reserved.variables">zmienne predefiniowane</link>.
    PHP udostępnia dodatkowo zestaw predefiniowanych tablic,
    które zawierają zmienne serwera WWW (jeśli jest używany),
    zmienne środowiskowe oraz wejście od użytkownika. Te tablice są automatycznie dostępne
    w każdym zakresie widoczności. Z tego powodu są często nazywane
    "zmiennymi superglobalnymi" (w PHP nie ma mechanizmu pozwalającego użytkownikowi na definiowanie
    własnych zmiennych superglobalnych). Możesz zobaczyć
    <link linkend="language.variables.superglobals">listę zmiennych superglobalnych</link>
    aby dowiedzieć się więcej.
   </para>

   <note>
    <title>Zmienne zmienne</title>
    <para>
     Zmienne superglobalne nie mogą być użyte jako
     <link linkend="language.variables.variable">zmienne zmiennych</link>
     wewnątrz funkcji, ani jako metody klasy.
    </para>
   </note>
   
   <para>
    Jeśli pewne zmienne w <link
    linkend="ini.variables-order">variables_order</link> nie są ustawione, to ich
    odpowiedniki zmiennych predefiniowanych PHP również są puste.
   </para>
  </sect1>


  <sect1 xml:id="language.variables.scope">
   <title>Zasięg zmiennych</title>

   <simpara>
    Zasięg zmiennej zależy od miejsca, w jakim ją zdefiniowano.
    PHP ma zakres funkcji oraz zakres globalny.
    Każda zmienna zdefiniowana poza funkcją jest ograniczona do zasięgu globalnego.
    Kiedy plik jest dołączany, jego kod dziedziczy zakres zmiennych
    z linii, w której nastąpiło dołączenie.
   </simpara>
   <example>
    <title>Przykład globalnego zakresu zmiennych</title>
    <programlisting role="php">
<![CDATA[
<?php
$a = 1;
include 'b.inc';
?>
]]>
    </programlisting>
   </example>
   
   <simpara>
    Każda zmienna utworzona wewnątrz nazwanej funkcji lub
    funkcji <link linkend="functions.anonymous">anonimowej</link>
    ma zasięg ograniczony do ciała funkcji.
    Jednakże <link linkend="functions.arrow">funkcje strzałkowe</link>
    przypinają zmienne z zakresu rodzica, aby były dostępne w ciele funkcji.
    Jeśli dołączenie plik następuje wewnątrz funkcji w
    pliku wywołującym, to zmienne zawarte w wywołanym pliku będą
    dostępne tak, jakby zostały zdefiniowane wewnątrz funkcji wywołującej.
   </simpara>

   <example>
    <title>Przykład lokalnego zasięgu widoczności zmiennej</title>
    <programlisting role="php"> 
<![CDATA[
<?php
$a = 1; // zasięg globalny

function test()
{ 
    echo $a; // Zmienna $a jest niezdefiniowana, bo odnosi się do lokalnej wersji $a
} 
?>
]]>
    </programlisting>
   </example>

   <simpara>
    Na przykład powyższe wygeneruje ostrzeżenie <constant>E_WARNING</constant>
    (bądź <constant>E_NOTICE</constant> przed PHP 8.0.0) ze względu na użycie nieistniejącej zmiennej.
    Dzieje się tak, ponieważ instrukcja echo
    odwołuje się do zmiennej lokalnej <varname>$a</varname>,
    której jak dotąd nie została przypisana żadna wartość.
    Można tu zauważyć różnicę w stosunku do języka C, gdzie
    zmienne globalne są zawsze dostępne wewnątrz
    definicji funkcji, o ile nie zostały nadpisane przez lokalną definicję
    zmiennej. Może to spowodować problem, że ktoś może nieodwracalnie
    zmienić wartość zmiennej globalnej. W PHP zmienne globalne muszą
    być jawnie określone jako globalne wewnątrz funkcji, w której mają być użyte, 
    do czego używamy słowa kluczowego global.
   </simpara>

   <sect2 xml:id="language.variables.scope.global">
    <title>Polecenie <literal>global</literal></title>
    <simpara>
     Słowo kluczowe <literal>global</literal> służy do przypięcia zmiennej z
     zakresu globalnego do zakresu lokalnego. Zostanie utworzona lokalna zmienna,
     która będzie odnosić się do zmiennej globalnej o tej samej nazwie. Jeśli globalna
     zmienna nie istnieje, to zmienna zostanie utworzona w zakresie globalnym i
     zostanie do niej przypisane &null;.
    </simpara>
    <para>
     <example>
      <title>Używanie polecenia <literal>global</literal></title>
      <programlisting role="php">
<![CDATA[
<?php
$a = 1;
$b = 2;

function suma()
{
    global $a, $b;

    $b = $a + $b;
}

suma();
echo $b;
?>
]]>
      </programlisting>
      &example.outputs;
      <screen>
       <![CDATA[
3
]]>
      </screen>
     </example>
    </para>

   <simpara>
    Przez zadeklarowanie
    wewnątrz funkcji globalności zmiennych <varname>$a</varname> i
    <varname>$b</varname>, wszystkie odwołania do tych zmiennych 
    będą odnosiły się do ich globalnych wersji. Nie ma żadnych ograniczeń
    w ilości zmiennych globalnych, na których chcemy operować wewnątrz funkcji.
   </simpara>

   <simpara>
    Drugim sposobem uzyskania dostępu do zmiennych globalnych wewnątrz funkcji
    jest użycie specjalnej, zdefiniowanej przez PHP tablicy 
    <varname>$GLOBALS</varname>. Powyższy przykład można zatem przepisać tak:
   </simpara>
   <para>
    <example>
     <title>Używanie <varname>$GLOBALS</varname> zamiast polecenia global</title>
     <programlisting role="php">
<![CDATA[
<?php
$a = 1;
$b = 2;

function Suma()
{
    $GLOBALS['b'] = $GLOBALS['a'] + $GLOBALS['b'];
}

Suma();
echo $b;
?>
]]>
     </programlisting>
    </example>
   </para>

   <simpara>
    Tablica <varname>$GLOBALS</varname> jest asocjacyjną tablicą,
    w której nazwa zmiennej jest kluczem, a zawartość zmiennej
    wartością komórki tablicy.
    Zauważ, że <varname>$GLOBALS</varname> jest dostępna z każdego miejsca,
    ponieważ <varname>$GLOBALS</varname> jest <link
    linkend="language.variables.superglobals">tablicą superglobalną</link>.
    Poniżej przykład demonstrujący moc superglobali:
   </simpara>
   <para>
    <example>
     <title>Przykład demonstrujący zmienne superglobalne i zasięg zmiennych</title>
     <programlisting role="php">
<![CDATA[
<?php
function test_superglobal()
{
    echo $_POST['name'];
}
?>
]]>
     </programlisting>
    </example>
   </para>
   <note>
    <simpara>
     Użycie <literal>global</literal> poza funkcją nie jest
     błędem. Może on zostać użyty jeżeli plik jest dołączany z wnętrza funkcji.
    </simpara>
   </note>
  </sect2>
 
  <sect2 xml:id="language.variables.scope.static">
   <title>Używanie zmiennych statycznych</title>
   <simpara>
    Jeszcze jedną ważną rzeczą, związaną z zasięgiem zmiennych jest zmienna
    statyczna (ang. <emphasis>static</emphasis> variable). Zmienna statyczna
    może mieć wyłącznie zasięg lokalny, ale nie traci swojej wartości, kiedy
    program opuści ten zasięg lokalny, w którym dana zmienna statyczna się
    znajduje. Rozważmy poniższy przykład:
   </simpara>
   <para>
    <example>
     <title>Przykład ukazujący przydatność zmiennych statycznych</title>
     <programlisting role="php">
<![CDATA[
<?php
function test()
{
    $a = 0;
    echo $a;
    $a++;
}
?>
]]>
     </programlisting>
    </example>
   </para>
   <simpara> 
    Ta funkcja jest bezużyteczna, gdyż przy każdym jej wywołaniu zmienna
    <varname>$a</varname> otrzymuje wartość <literal>0</literal>, w związku
    z czym funkcja stale wyświetla <literal>0</literal>. Występująca potem
    inkrementacja <varname>$a</varname>++ nie ma żadnego znaczenia, gdyż
    funkcja się kończy i zmienna <varname>$a</varname> znika. Aby powyższa
    funkcja miała jakiś sens, należy zapobiec gubieniu wartości
    <varname>$a</varname>, do czego używamy słowa kluczowego static:
   </simpara>
   <para>
    <example>
     <title>Przykład użycia zmiennych statycznych</title>
     <programlisting role="php">
<![CDATA[
<?php
function test()
{
    static $a = 0;
    echo $a;
    $a++;
}
?>
]]>
     </programlisting>
    </example>
   </para>
   <simpara>
    Teraz, <varname>$a</varname> jest inicjowana tylko przy pierwszym wywołaniu funkcji
    a, przy każdym wywołaniu funkcji <literal>test()</literal>, zostanie wyświetlona wartość
    zmiennej <varname>$a</varname>, po czym ta zmienna zostanie inkrementowana.
   </simpara>

   <simpara>
    Zmienne statyczne pozwalają też na wykorzystanie funkcji rekurencyjnych,
    czyli takich, które wywołują same siebie. Poniższa, prosta
    funkcja rekurencyjnie liczy do 10, używając zmiennej
    statycznej <varname>$licznik</varname>, aby wiedzieć, kiedy się zatrzymać:
   </simpara>
   <para>
    <example>
     <title>Zmienne statyczne w funkcjach rekurencyjnych</title>
     <programlisting role="php">
<![CDATA[
<?php
function test()
{
    static $licznik = 0;

    $licznik++;
    echo $licznik;
    if ($licznik < 10) {
        test();
    }
    $licznik--;
}
?>
]]>
     </programlisting>
    </example>
   </para>

   <para>
    Przed PHP 8.3.0 statyczne zmienne mogły być zainicjalizowane tylko przy użyciu
    wyrażeń stałych. Od PHP 8.3.0 wyrażenia dynamiczne
    (jak np. wywołania funkcji) też są dozwolone:
   </para>

   <para>
    <example>
     <title>Deklarowanie zmiennych statycznych</title>
     <programlisting role="php">
<![CDATA[
<?php
function foo(){
    static $int = 0;          // poprawne
    static $int = 1+2;        // poprawne
    static $int = sqrt(121);  // poprawne od PHP 8.3.0

    $int++;
    echo $int;
}
?>
]]>
     </programlisting>
    </example>
   </para>

   <simpara>
    Zmienne statyczne wewnątrz funkcji anonimowych są zachowywane tylko wewnątrz
    instancji tej konkretnej funkcji. Jeśli funkcja anonimowa jest tworzona ponownie przy każdym
    wywołaniu, to zmienna statyczna będzie inicjalizowana ponownie.
   </simpara>
   <example>
    <title>Zmienne statyczne w funkcjach anonimowych</title>
    <programlisting role="php">
     <![CDATA[
<?php
function exampleFunction($input) {
    $result = (static function () use ($input) {
        static $counter = 0;
        $counter++;
        return "Wejście: $input, Licznik: $counter\n";
    });

    return $result();
}

// Wywołania exampleFunction będą tworzyły funkcję anonimową ponownie, więc zmienna
// statyczna nie zachowa swojej wartości.
echo exampleFunction('A'); // Wyświetla: Wejście: A, Licznik: 1
echo exampleFunction('B'); // Wyświetla: Wejście: B, Licznik: 1
?>
]]>
    </programlisting>
   </example>

   <para>
    Od PHP 8.1.0, kiedy metoda używająca zmiennych statycznych jest dziedziczona (ale nie nadpisywana),
    odziedziczona metoda będzie współdzielić zmienne statyczne z metodą rodzica.
    To oznacza, że zmienne statyczne w metodach zachowują się teraz w taki sam sposób jak właściwości statyczne.
   </para>

   <simpara>
    Od PHP 8.3.0 zmienne statyczne mogą być inicjalizowane dowolnymi wyrażeniami.
    Oznacza to, że do zainicjalizowania zmiennych statycznych mogą być użyte np. wywołania metod.
   </simpara>

   <example>
    <title>Użycie zmiennych statycznych w dziedziczonych metodach</title>
    <programlisting role="php">
<![CDATA[
<?php
class Foo {
    public static function counter() {
        static $counter = 0;
        $counter++;
        return $counter;
    }
}
class Bar extends Foo {}
var_dump(Foo::counter()); // int(1)
var_dump(Foo::counter()); // int(2)
var_dump(Bar::counter()); // int(3), przed PHP 8.1.0 int(1)
var_dump(Bar::counter()); // int(4), przed PHP 8.1.0 int(2)
?>
]]>
    </programlisting>
   </example>
  </sect2>

  <sect2 xml:id="language.variables.scope.references">
   <title>Referencje do zmiennych statycznych i globalnych</title>
   <simpara>
    PHP implementuje modyfikatory
    <link linkend="language.variables.scope.static">statyczny</link> oraz
    <link linkend="language.variables.scope.global">globalny</link>
    dla zmiennych, pod względem <link linkend="language.references">
    referencji</link>. Na przykład, w rzeczywistości globalna zmienna
    wprowadzona wewnątrz zasięgu funkcji z wyrażeniem <literal>global</literal>
    na dziś dzień tworzy referencję do zmiennej globalnej. Takie zachowanie może
    prowadzić do nieoczekiwanych sytuacji, czego dowodzi poniższy przykład:
   </simpara>

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
function test_global_ref() {
    global $obj;
    $new = new stdClass;
    $obj = &$new;
}

function test_global_noref() {
    global $obj;
    $new = new stdClass;
    $obj = $new;
}

test_global_ref();
var_dump($obj);
test_global_noref();
var_dump($obj);
?>
]]>
    </programlisting>
   </informalexample>

   &example.outputs;

   <screen>
<![CDATA[
NULL
object(stdClass)#1 (0) {
}
]]>
   </screen>

   <simpara>
    Podobna sytuacja dotyczy deklaracji <literal>static</literal>.
    Referencje nie są magazynowane statycznie:
   </simpara>

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
function &get_instance_ref() {
    static $obj;

    echo 'Obiekt statyczny: ';
    var_dump($obj);
    if (!isset($obj)) {
        $new = new stdClass;
        // Przypisanie referencji do zmiennej statycznej.
        $obj = &$new;
    }
    if (!isset($obj->property)) {
        $obj->property = 1;
    } else {
        $obj->property++;
    }
    return $obj;
}

function &get_instance_noref() {
    static $obj;

    echo 'Obiekt statyczny: ';
    var_dump($obj);
    if (!isset($obj)) {
        $new = new stdClass;
        // Przypisanie do obiektu zmiennej statycznej
        $obj = $new;
    }
    if (!isset($obj->property)) {
        $obj->property = 1;
    } else {
        $obj->property++;
    }
    return $obj;
}

$obj1 = get_instance_ref();
$still_obj1 = get_instance_ref();
echo "\n";
$obj2 = get_instance_noref();
$still_obj2 = get_instance_noref();
?>
]]>
    </programlisting>
   </informalexample>

   &example.outputs;

   <screen>
<![CDATA[
Obiekt statyczny: NULL
Obiekt statyczny: NULL

Obiekt statyczny: NULL
Obiekt statyczny: object(stdClass)#3 (1) {
  ["property"]=>
  int(1)
}
]]>
   </screen>
          
   <simpara>
    Ten przykład pokazuje, że podczas przypisywania referencji do zmiennej
    statycznej, nie następuje <emphasis>zapamiętanie</emphasis>, gdy funkcja
    <literal>&amp;get_instance_ref()</literal> zostanie wywołana po raz drugi.
   </simpara>
   </sect2>
  </sect1>

  <sect1 xml:id="language.variables.variable">
   <title>Zmienne zmiennych</title>

   <simpara>
    W niektórych przypadkach jest wygodne, by móc użyć zmiennej o zmiennej
    nazwie. To znaczy zmiennej, której nazwa może być zmieniana dynamicznie.
    Zwykła zmienna jest ustawiana wyrażeniem jak poniżej:
   </simpara>

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$a = "witaj";
?>
]]>
    </programlisting>
   </informalexample>

   <simpara>
    Zmienna zmienna pobiera wartość jednej zmiennej i traktuje ją
    jako nazwę innej.  W powyższym przykładzie,
    <emphasis>witaj</emphasis>, może stać się nazwą zmiennej,
    dzięki użyciu dwóch znaków dolara, tzn.
   </simpara>

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$$a = "świecie";
?>
]]>
    </programlisting>
   </informalexample>

   <simpara>
    W tym momencie dwie zmienne zostały zdefiniowane i umieszczone w drzewie
    symbolicznym PHP: <varname>$a</varname> zawierająca "witaj" i 
    <varname>$witaj</varname> zawierająca "świecie". Zatem poniższy
    zapis:
   </simpara>

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
echo "$a {$$a}";
?>
]]>
    </programlisting>
   </informalexample>

   <simpara>
    znaczy to samo, co:
   </simpara>

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
echo "$a $witaj";
?>
]]>
    </programlisting>
   </informalexample>

   <simpara>
    tzn. obydwa wyświetlą: <computeroutput>witaj świecie</computeroutput>.
   </simpara>

   <simpara>
    Aby używać zmiennych zmiennych jako tablic, trzeba
    wyjaśnić pewną niejasność. Mianowicie, jeśli parser napotka
    <varname>$$a[1]</varname>, to musi wiedzieć, czy
    <varname>$a[1]</varname> ma być użyte jako zmienna, czy też
    <varname>$$a</varname> miało być zmienną, a [1] indeksem
    z tej zmiennej. W tym przypadku należy zastosować odrębną
    składnię: <varname>${$a[1]}</varname> dla pierwszego przypadku a
    <varname>${$a}[1]</varname> dla drugiego.
   </simpara>

   <simpara>
    Dostęp do właściwości klas można uzyskać także za pomocą zmiennej nazwy
    właściwości. Zmienna nazwa właściwości zostanie zinterpretowana w
    zasięgu, z którego jest wywoływana. Przykładowo, weźmiemy
    wyrażenie takie jak <varname>$foo->$bar</varname>, to zasięg
    lokalny będzie przeszukany pod kątem <varname>$bar</varname> i jej wartość
    zostanie użyta jako nazwa właściwości
    of <varname>$foo</varname>. Jest to także prawdą
    jeżeli <varname>$bar</varname> jest dostępem do tablicy.
   </simpara>
   
   <simpara>
    Do jasnego ograniczenia nazwy właściwości można wykorzystać też nawiasy
    klamrowe. Są one szczególnie użyteczne, gdy uzyskuje się dostęp do właściwości
    zawierającej tablicę, gdy nazwa właściwości jest składana z wielu części
    lub gdy nazwa właściwości zawiera znaki, które nie są
    w innym wypadku prawidłowe (np. z <function>json_decode</function>
    lub <link linkend="book.simplexml">SimpleXML</link>).
   </simpara>

   <para>
    <example>
     <title>Przykład zmiennej właściwości</title>
      <programlisting role="php">
<![CDATA[
<?php
class Foo {
    public $bar = 'Jestem bar.';
    public $arr = ['Jestem A.', 'Jestem B.', 'Jestem C.'];
    public $r   = 'Jestem r.';
}

$foo = new Foo();
$bar = 'bar';
$baz = ['foo', 'bar', 'baz', 'quux'];
echo $foo->$bar . "\n";
echo $foo->{$baz[1]} . "\n";

$start = 'b';
$end   = 'ar';
echo $foo->{$start . $end} . "\n";

$arr = 'arr';
echo $foo->{$arr[1]} . "\n";
echo $foo->{$arr}[1] . "\n";

?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
Jestem bar.
Jestem bar.
Jestem bar.
Jestem r.
Jestem B.
]]>
     </screen>
    </example>
   </para> 

   <warning>   
    <simpara>
     Zauważ, że zmienne zmiennych nie mogą być używane z
     <link linkend="language.variables.superglobals">Tablicami superglobalnymi</link>
     PHP, wewnątrz funkcji, czy metod klas. Zmienna <literal>$this</literal>
     jest także specjalną zmienną, dla której referencje dynamiczne nie są dozwolone.
    </simpara>
   </warning>

  </sect1>

  <sect1 xml:id="language.variables.external">
   <title>Zmienne ze źródeł zewnętrznych</title>

   <sect2 xml:id="language.variables.external.form">
    <title>Formularze HTML (GET i POST)</title>

    <simpara>
     Kiedy do skryptu PHP zostanie wysłany formularz, informacja
     z niego jest automatycznie dostępna w skrypcie. Istnieje
     kilka sposobów na uzyskanie tych informacji, dla przykładu:
    </simpara>

    <para>
     <example>
      <title>Prosty formularz HTML</title>
      <programlisting role="html">
<![CDATA[
<form action="foo.php" method="post">
    Imie:  <input type="text" name="imie" /><br />
    Email: <input type="text" name="email" /><br />
    <input type="submit" name="submit" value="Wyslij!" />
</form>
]]>
      </programlisting>
     </example>
    </para>

    <para>
     Istnieją tylko dwie drogi uzyskiwania dostępu do informacji z formularza.
     Obecnie dostępne metody zostały wymienione poniżej:
    </para>

    <para>
     <example>
      <title>Dostęp do informacji z prostego formularza HTML (wysłanego metodą POST)</title>
      <programlisting role="php">
<![CDATA[
<?php
echo $_POST['imie'];
echo $_REQUEST['imie'];
?>
]]>
      </programlisting>
     </example>
    </para>

    <para>
     Przesyłanie danych z formularza metodą GET jest podobne, z takim wyjątkiem, że należy użyć
     zmiennej predefiniowanej odpowiedniej dla tej metody. GET odnosi
     się także do tzw. <literal>QUERY_STRING</literal> (informacje w adresie URL, po znaku '?'). Tak więc,
     dla przykładu, <literal>http://www.example.com/test.php?id=3</literal>
     zawiera dane dla metody GET, dostępne poprzez <varname>$_GET['id']</varname>.
     Zobacz także <varname>$_REQUEST</varname>.
    </para>

    <note>
     <para>
      Spacje i kropki w nazwach zmiennych są konwertowane do znaków podkreślenia. Na
      przykład <literal>&lt;input name="a.b" /&gt;</literal> staje się zmienną
      <literal>$_REQUEST["a_b"]</literal>.
     </para>
    </note>

    <simpara>
     PHP obsługuje także tablice w kontekście zmiennych z formularzy 
     (zajrzyj do <link linkend="faq.html">FAQ</link>).
     Na przykład powiązane zmienne mogą być zgrupowane lub ta
     funkcjonalność może być użyta aby pobrać wartości z pola wielokrotnego wyboru. Na
     przykład, wyślijmy formularz z pliku metodą POST do samego siebie
     i wyświetlmy te dane:
    </simpara>

    <para>
     <example>
      <title>Bardziej złożone zmienne w formularzach</title>
      <programlisting role="php">
<![CDATA[
<?php
if ($_POST) {
    echo '<pre>';
    echo htmlspecialchars(print_r($_POST, true));
    echo '</pre>';
}
?>
<form action="" method="post">
    Nazwisko: <input type="text" name="personal[nazwisko]"><br />
    Email: <input type="text" name="personal[email]"><br />
    Piwo: <br />
    <select multiple name="piwo[]">
        <option value="zywiec">Żywiec</option>
        <option value="tyskie">Tyskie</option>
        <option value="lech">Lech</option>
    </select><br />
    <input type="submit" value="Wyślij mnie!" />
</form>
]]>
      </programlisting>
     </example>
    </para>

    <note>
     <simpara>
      Jeżeli zewnętrzna nazwa zmiennej zaczyna się od poprawnej składni tablicy, końcowe
      znaki są po cichu ignorowane. Przykładowo <literal>&lt;input name="foo[bar]baz"&gt;</literal>
      staje się <literal>$_REQUEST['foo']['bar']</literal>.
     </simpara>
    </note>

    <sect3 xml:id="language.variables.external.form.submit">
     <title>Nazwy zmiennych dla SUBMIT w postaci obrazka</title>

     <simpara>
      Przy tworzeniu formularza, można użyć obrazka, zamiast standardowego
      przycisku Wyślij, za pomocą takiego znacznika:
     </simpara>

     <informalexample>
      <programlisting role="html">
<![CDATA[
<input type="image" src="obrazek.gif" name="sub" />
]]>
      </programlisting>
     </informalexample>

     <simpara>
      Kiedy użytkownik kliknie gdzieś na obrazku, formularz, którego
      to dotyczy, zostanie wysłany do serwera z dwiema dodatkowymi
      zmiennymi, <varname>sub_x</varname> i <varname>sub_y</varname>. Zawierają one współrzędne miejsca
      kliknięcia na obrazek. Można przy tym zauważyć, że
      na razie w nazwach zmiennych znajduje się kropka
      zamiast podkreślnika, ale PHP konwertuje kropkę na
      podkreślnik automatycznie.
     </simpara>
    </sect3>

   </sect2>

   <sect2 xml:id="language.variables.external.cookies">
    <title>Ciasteczka HTTP</title>

    <simpara>
     PHP bez problemu obsługuje ciasteczka HTTP, tak jak zdefiniowano w <link
     xlink:href="&url.rfc;6265">RFC 6265</link>. Ciasteczka są
     mechanizmem przechowywania informacji w przeglądarce klienta w celu
     śledzenia lub identyfikowania stałych bywalców strony. Ciasteczka ustawia
     się za pomocą funkcji <function>setcookie</function>. Ciasteczka są częścią
     nagłówka HTTP, więc funkcja SetCookie musi być wywołana zanim jakakolwiek
     inna informacja zostanie wysłana do przeglądarki. Takie samo ograniczenie
     dotyczy funkcji <function>header</function>. Dane z ciasteczek 
     są wówczas dostępne w odpowiednich tablicach danych cookies, takich 
     jak <varname>$_COOKIE</varname>, jak również <varname>$_REQUEST</varname>. 
     Zobacz także stronę dotyczącą funkcji <function>setcookie</function> aby poznać więcej
     informacji i przykładów.
    </simpara>

    <note>
     <simpara>
      Począwszy od PHP 7.2.34, 7.3.23 oraz 7.4.11, <emphasis>nazwy</emphasis>
      odbieranych przez PHP ciasteczek nie są już dłużej dekodowane jak adresy URL ze względów
      bezpieczeństwa.
     </simpara>
    </note>

    <simpara>
     Aby przypisać wiele wartości do jednego ciasteczka,
     można przypisać je jako tablicę. Na przykład:
    </simpara>

    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
  setcookie("MojeCiasteczko[foo]", 'Test 1', time()+3600);
  setcookie("MojeCiasteczko[bar]", 'Test 2', time()+3600);
?>
]]>
     </programlisting>
    </informalexample>

    <simpara>
     Spowoduje to stworzenie dwóch oddzielnych ciasteczek, mimo, iż <varname>MojeCiasteczko</varname> będzie teraz
     pojedynczą tablicą w skrypcie. Jeśli ma być ustawione tylko jedno ciasteczko
     z wieloma wartościami, rozważ możliwość użycia przedtem funkcji <function>serialize</function>
     lub <function>explode</function> na wartości.
    </simpara>

    <simpara>
     Pamiętaj, że wysłane ciasteczko zastąpi wcześniejsze ciasteczko o tej
     nazwie w przeglądarce, o ile ścieżka lub domena nie są różne. Na przykład koszyk
     do zakupów może potrzebować licznika, którego wartość będzie przekazywana dalej. To znaczy:
    </simpara>

    <example>
     <title>Przykład użycia funkcji <function>setcookie</function></title>
     <programlisting role="php">
<![CDATA[
<?php
if (isset($_COOKIE['ile'])) {
    $ile = $_COOKIE['ile'] + 1;
} else {
    $ile = 1;
}
setcookie('ile', $ile, time()+3600);
setcookie("Cart[$ile]", $pozycja, time()+3600);
?>
]]>
     </programlisting>
    </example>

   </sect2>

   <sect2 xml:id="language.variables.external.dot-in-names">
    <title>Kropki w nazwach odbieranych zmiennych</title>

    <para>
     PHP normalnie nie zmienia nazw zmiennych podczas
     przekazywania ich do skryptu. Jednakże należy pamiętać, że
     kropka "." nie jest poprawnym znakiem w
     nazwie zmiennej PHP. Dlaczego? Proszę spojrzeć na to:
     <programlisting role="php">
<![CDATA[
<?php
$varname.ext;  /* niepoprawna nazwa zmiennej */
?>
]]>
     </programlisting>
     To co widzi parser, to zmienna o nazwie
     <varname>$varname</varname>, po której pojawia się operator konkatenacji,
     a następnie pusty łańcuch (czyli taki, który
     nie jest żadnym słowem kluczowym, ani zarezerwowanym) "ext". Oczywiście,
     nie daje to żadnego sensownego wyniku.
    </para>

    <para>
     Warto zatem wiedzieć, że PHP automatycznie
     zastąpi podkreślnikiem "_" każdą kropkę w nazwie każdej
     odebranej zmiennej.
    </para>

   </sect2>

   <sect2 xml:id="language.variables.determining-type-of">
    <title>Określanie typów zmiennych</title>

    <para>
     Ponieważ PHP samodzielnie określa typy zmiennych i konwertuje je
     (zasadniczo) jak potrzeba, nie zawsze jest jasne, jakiego typu jest dana
     zmienna w danym momencie. PHP zawiera kilka funkcji do określania typów
     zmiennych, takich jak:
     <function>gettype</function>, <function>is_array</function>,
     <function>is_float</function>, <function>is_int</function>,
     <function>is_object</function> i
     <function>is_string</function>. Zobacz także rozdział
     o <link linkend="language.types">Typach</link>.
    </para>
    <para>
     Ponieważ HTTP jest protokołem tekstowym większość, jeśli nie całość,
     zawartości która przychodzi w
     <link linkend="language.variables.superglobals">tablicach superglobalnych</link>, 
     jak <varname>$_POST</varname> czy <varname>$_GET</varname> pozostanie
     łańcuchami znaków. PHP nie będzie próbował konwertować wartości do określonego typu.
     W przykładzie poniżej <varname>$_GET["var1"]</varname> będzie zawierać łańcuch
     znaków "null" a <varname>$_GET["var2"]</varname> łańcuch znaków "123".
     <programlisting>
<![CDATA[
/index.php?var1=null&var2=123
]]>
      </programlisting>
    </para>
   </sect2>

   <sect2 xml:id="language.variables.external.changelog">
    &reftitle.changelog;

    <para>
     <informaltable>
      <tgroup cols="2">
       <thead>
        <row>
         <entry>&Version;</entry>
         <entry>&Description;</entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry>7.2.34, 7.3.23, 7.4.11</entry>
         <entry>
          <emphasis>Nazwy</emphasis> ciasteczek odbieranych przez PHP nie są już dłużej dekodowane jak adresy URL
          ze względów bezpieczeństwa.
         </entry>
        </row>
       </tbody>
      </tgroup>
     </informaltable>
    </para>
   </sect2>

  </sect1>

 </chapter>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
