<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: e587d0655e426f97b3fcb431453da5030e743b23 Maintainer: sobak Status: ready -->
<sect1 xml:id="language.types.callable">
 <title>Funkcje zwrotne / Callable</title>

 <para>
  Funkcje zwrotne mogą być oznaczone deklaracją typu <type>callable</type>.
 </para>

 <para>
  Niektóre funkcje, takie jak <function>call_user_func</function> lub
  <function>usort</function> przyjmują funkcje zwrotne zdefiniowane przez użytkownika jako
  swój parametr. Funkcje zwrotne mogą być nie tylko prostymi funkcjami, ale też
  metodami obiektów, w tym statycznymi metodami klas.
 </para>

 <sect2 xml:id="language.types.callable.passing">
  <title>Przekazywanie</title>

  <para>
   Funkcje PHP są przekazywane jako ciąg znaków z ich nazwą. Może byc użyta
   każda wbudowana lub zdefiniowana przez użytkownika funkcja, poza konstrukcjami języka takimi jak:
   <function>array</function>, <function>echo</function>,
   <function>empty</function>, <function>eval</function>,
   <function>exit</function>, <function>isset</function>,
   <function>list</function>, <function>print</function> i
   <function>unset</function>.
  </para>

  <para>
   Metoda zainstancjonowanego <link linkend="language.types.object">obiektu</link> jest przekazywana jako
   <link linkend="language.types.array">tablica</link> zawierająca obiekt jako indeks 0 oraz
   nazwę metody pod indeksem 1. Można tak uzyskać dostęp do metod prywatnych i protected
   z tej samej klasy.
  </para>

  <para>
   Statyczne metody klas mogą być też przekazane bez tworzenia
   obiektu tej klasy, przekazując nazwę klasy zamiast jej
   obiektu pod indeksem 0 lu przekazując ciąg znaków w formacie
   <literal>'NazwaKlasy::nazwaMetody'</literal>.
  </para>

  <para>
   Poza zwykłymi funkcjami zdefiniowanymi przez użytkownika,
   jako parametr typu callback mogą być też przekazane
   <link linkend="functions.anonymous">funkcje anonimowe</link> i
   <link linkend="functions.arrow">funkcje strzałkowe</link>.
  </para>

  <note>
   <para>
    Od PHP 8.1.0 funkcje anonimowe mogą być też stworzone przy użyciu <link linkend="functions.first_class_callable_syntax">specjalnej składni</link>.
   </para>
  </note>

  <para>
   Ogólnie rzecz biorąc, każdy obiekt implementujący <link linkend="object.invoke">__invoke()</link> może również
   zostać przekazany do parametru, który oczekuje callbacku.
  </para>

  <para>
   <example>
    <title>
     Przykłady funkcji zwrotnych
    </title>
    <programlisting role="php">
<![CDATA[
<?php

// Przykładowa funkcja zwrotna
function my_callback_function() {
    echo 'hello world!', PHP_EOL;
}

// Przykładowa metoda zwrotna
class MyClass {
    static function myCallbackMethod() {
        echo 'Hello World!', PHP_EOL;
    }
}

// Typ 1: Prosty callback
call_user_func('my_callback_function');

// Typ 2: Wywołanie statycznej metody klasy
call_user_func(array('MyClass', 'myCallbackMethod'));

// Typ 3: Wywołanie metody na obiekcie
$obj = new MyClass();
call_user_func(array($obj, 'myCallbackMethod'));

// Typ 4: Wywołanie statycznej metody klasy
call_user_func('MyClass::myCallbackMethod');

// Typ 5: Relatywne wywołanie statycznej metody klasy
class A {
    public static function who() {
        echo 'A', PHP_EOL;
    }
}

class B extends A {
    public static function who() {
        echo 'B', PHP_EOL;
    }
}

call_user_func(array('B', 'parent::who')); // Wyświetla "A", przestarzałe od PHP 8.2.0

// Typ 6: Obiekty implementujące __invoke mogą być użyte jako funkcje zwrotne
class C {
    public function __invoke($name) {
        echo 'Hello ', $name, PHP_EOL;
    }
}

$c = new C();
call_user_func($c, 'PHP!');
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>
     Przykład funkcji zwrotnej przy użyciu domknięcia (closure)
     Callback example using a Closure
    </title>
   <programlisting role="php">
<![CDATA[
<?php
// Nasze domknięcie
$double = function($a) {
    return $a * 2;
};

// Nasz zbiór liczb
$numbers = range(1, 5);

// Użyj domknięcia jako funkcji zwrotnej, aby
// podwoić rozmiar każdego z elementów
// w naszym zbiorze
$new_numbers = array_map($double, $numbers);

print implode(' ', $new_numbers);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
2 4 6 8 10
]]>
    </screen>
   </example>
  </para>

  &note.func-callback-exceptions;
 </sect2>

</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
