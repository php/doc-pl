<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: e587d0655e426f97b3fcb431453da5030e743b23 Maintainer: sobak Status: ready -->
<sect1 xml:id="language.types.float" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Liczby zmiennoprzecinkowe</title>

 <para>
  Liczby zmiennoprzecinkowe (znane też jako "floaty", "double" lub liczby rzeczywiste)
  mogą być określone używając następujących składni:
 </para>

 <informalexample>
  <programlisting role="php">
<![CDATA[
<?php
$a = 1.234; 
$b = 1.2e3; 
$c = 7E-10;
$d = 1_234.567; // od PHP 7.4.0
?>
]]>
  </programlisting>
 </informalexample>

 <para>
  Formalna definicja od PHP 7.4.0 (wcześniej znaki podkreślenia nie były dozwolone):
 </para>

 <informalexample>
  <programlisting>
<![CDATA[
LNUM          [0-9]+(_[0-9]+)*
DNUM          ({LNUM}?"."{LNUM}) | ({LNUM}"."{LNUM}?)
EXPONENT_DNUM (({LNUM} | {DNUM}) [eE][+-]? {LNUM})
]]>
  </programlisting>
 </informalexample>

 <para>
  Rozmiar liczby zmiennoprzecinkowej zależy od platformy, choć maksymalna wartość około 1.8e308
  z precyzją około 14 miejsc po przecinku jest najbardziej powszechna (format IEEE dla
  64 bitów).
 </para>

 <warning xml:id="warn.float-precision">
  <title>Precyzja zmiennoprzecinkowa</title>

  <para>
   Liczby zmiennoprzecinkowe mają ograniczoną precyzję. Mimo iż zależy to od
   systemu, PHP zazwyczaj używa formatu podwójnej precyzji IEEE 754, który
   daje maksymalny błąd względny wynikający z zaokrąglenia rzędu 1,11e-16.
   Nieelementarne operacje arytmetyczne mogą skutkować większymi błędami i oczywiście,
   propagacja błędów musi być brana pod uwagę, gdy kilka operacji jest
   złożonych.
  </para>
  
  <para>
   Dodatkowo, liczby wymierne, które są dokładnie reprezentowalne jako liczby
   zmiennoprzecinkowe o podstawie 10, takie jak <literal>0.1</literal> lub
   <literal>0.7</literal>, nie mają dokładnej reprezentacji jako liczby
   zmiennoprzecinkowe o podstawie 2, która jest używana wewnętrznie, bez względu na rozmiar
   mantysy. W związku z tym nie można ich przekonwertować na ich wewnętrzne binarne
   odpowiedniki bez niewielkiej utraty precyzji. Może to prowadzić do mylących
   wyników: na przykład <literal>floor((0.1+0.7)*10)</literal> zazwyczaj
   zwróci <literal>7</literal> zamiast oczekiwanego <literal>8</literal>,
   ponieważ wewnętrzna reprezentacja będzie wyglądać mniej więcej tak
   <literal>7.9999999999999991118...</literal>.
  </para>

  <para>
   Tak więc nigdy nie ufaj wynikom liczb zmiennoprzecinkowych do ostatniej cyfry i nie porównuj
   liczb zmiennoprzecinkowych bezpośrednio pod kątem równości. Jeśli konieczna jest wyższa
   precyzja, dostępne są <link linkend="ref.bc">funkcje matematyczne dowolnej precyzji</link>
   i <link linkend="ref.gmp">funkcje gmp</link>.
  </para>
  
  <para>
   Dla "prostego" wyjaśnienia zobacz <link xlink:href="&url.floating.point.guide;">poradnik o liczbach zmiennoprzecinkowych</link>
   (w języku angielskim), który jest też zatytułowany "Dlaczego moje liczby się nie dodają?".
  </para>
 </warning>

 <sect2 xml:id="language.types.float.casting">
  <title>Konwersja na liczbę zmiennoprzecinkową</title>

  <sect3 xml:id="language.types.float.casting.from-string">
   <title>Z łańcuchów znaków</title>

   <simpara>
    Jeżeli łańcuch znaków jest
    <link linkend="language.types.numeric-strings">numeryczny</link>
    lub jego początek jest numeryczny, to zostanie rozwiązany do
    odpowiadającej wartości zmiennoprzecinkowej, w przeciwnym razie zostanie skonwertowany na zero
    (<literal>0</literal>).
   </simpara>
  </sect3>

  <sect3 xml:id="language.types.float.casting.from-other">
   <title>Z innych typów</title>

   <para>
    Dla wartości innych typów konwersja jest wykonywana przez skonwertowanie
    wartości najpierw na <type>int</type>, a potem na <type>float</type>. Zobacz
    rozdział <link linkend="language.types.integer.casting">Konwersja na liczbę całkowitą</link>,
    aby dowiedzieć się więcej.
   </para>

   <note>
    <para>
     Jako że pewne typy mają niezdefiniowane zachowanie podczas konwersji na
     <type>int</type>, występuje to także podczas konwersji na
     <type>float</type>.
    </para>
   </note>
  </sect3>
 </sect2>

 <sect2 xml:id="language.types.float.comparison">
  <title>Porównywanie liczb zmiennoprzecinkowych</title>

  <para>
   Jak zaznaczono w ostrzeżeniu powyżej, sprawdzanie liczb zmiennoprzecinkowych pod kątem równości jest
   problematyczne, ze względu na ich wewnętrzną reprezentację. Jednakże
   istnieją sposoby porównywania liczb zmiennoprzecinkowych, które obchodzą
   te ograniczenia.
  </para>

  <para>
   Aby przetestować wartości zmiennoprzecinkowe pod kątem równości, używana jest
   górna granica względnego błędu z powodu zaokrąglenia. Wartość ta znana jest jako epsilon maszynowy
   lub zaokrąglenie jednostkowe i jest najmniejszą dopuszczalną różnicą w obliczeniach.
  </para>

  <para>
   <varname>$a</varname> i <varname>$b</varname> są identyczne do precyzji
   5 cyfr po przecinku.
  </para>

  <example>
   <title>Porównywanie liczb zmiennoprzecinkowych</title>
   <programlisting role="php">
<![CDATA[
<?php
$a = 1.23456789;
$b = 1.23456780;
$epsilon = 0.00001;

if (abs($a - $b) < $epsilon) {
    echo "true";
}
?>
]]>
   </programlisting>
  </example>
 </sect2>
 
 <sect2 xml:id="language.types.float.nan">
  <title>NaN</title>
  <para>
   Niektóre operacje numeryczne mogą skutkować wartością reprezentowaną przez stałą
   <constant>NAN</constant>. Ten wynik oznacza niezdefniowaną lub
   niereprezentowalną wartość w obliczeniach zmiennoprzecinkowych. Dowolne luźne lub ścisłe
   porównanie tej wartości z dowolną inną wartością (nawet z samą sobą), poza &true;, będzie
   miało wynik &false;.
  </para>
  <para>
   Jako że <constant>NAN</constant> reprezentuje dowolną ilość różnych wartości,
   <constant>NAN</constant> nie powinien być porównywany do innych wartości, w tym
   do siebie samego, a w zamian powinien być sprawdzony funkcją <function>is_nan</function>.
  </para>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
