<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: e587d0655e426f97b3fcb431453da5030e743b23 Maintainer: sobak Status: ready -->
<sect1 xml:id="language.types.type-juggling">
 <title>Dopasowywanie typów</title>

 <simpara>
  PHP nie wymusza jawnej deklaracji typu przy deklarowaniu zmiennej.
  W tym wypadku typ zmiennej jest określany przez wartość, którą ona przechowuje.
  Oznacza to, że jeśli przypisujemy <type>string</type> do zmiennej
  <varname>$var</varname>, to <varname>$var</varname> jest typu
  <type>string</type>. Jeśli później przypiszemy do niej wartość typu <type>int</type>,
  to <varname>$var</varname> stanie się zmienną typu <type>int</type>.
 </simpara>

 <para>
  PHP może spróbować skonwertować typ wartości na inny automatycznie
  w niektórych kontekstach. Różne istniejące konteksty to:
  <itemizedlist>
   <listitem>
    <simpara>Numeryczny</simpara>
   </listitem>
   <listitem>
    <simpara>Ciąg znaków</simpara>
   </listitem>
   <listitem>
    <simpara>Logiczny</simpara>
   </listitem>
   <listitem>
    <simpara>Całkowity i ciągów znaków</simpara>
   </listitem>
   <listitem>
    <simpara>Porównawczy</simpara>
   </listitem>
   <listitem>
    <simpara>Funkcji</simpara>
   </listitem>
  </itemizedlist>
 </para>

 <note>
  <simpara>
   Kiedy wartość musi być zinterpretowana jako inny typ, sama wartość
   <emphasis>nie</emphasis> zmienia typu.
  </simpara>
 </note>

 <simpara>
  Aby wymusić traktowanie zmiennej jako określony typ, zapoznaj się z sekcją poświęconą
  <link linkend="language.types.typecasting">rzutowaniu typów</link>. Aby zmienić
  typ zmiennej, zapoznaj się z funkcją <function>settype</function>.
 </simpara>

 <sect2>
  <title>Konteksty numeryczne</title>

  <simpara>
   Ten kontekst stosowany jest, gdy używany jest
   <link linkend="language.operators.arithmetic">operator arytmetyczny</link>.
  </simpara>

  <simpara>
   W tym kontekście, jeśli któryś z operandów jest typu <type>float</type> (lub nie
   jest interpretowalny jako <type>int</type>), to oba operandy są interpretowane jako
   <type>float</type> (liczby zmiennoprzecinkowe) i wynik będzie typu <type>float</type>.
   W przeciwnym razie operandy będą interpretowane jako <type>int</type> (liczby całkowite)
   i wynik też będzie typu <type>int</type>.
   Od PHP 8.0.0 jeśli jeden z operandów nie może być zinterpretowany,
   zostanie rzucony <classname>TypeError</classname>.
  </simpara>
 </sect2>

 <sect2>
  <title>Konteksty ciągów znaków</title>

  <simpara>
   Ten kontekst stosowany jest, gdy używane są <function>echo</function>,
   <function>print</function>,
   <link linkend="language.types.string.parsing">interpolacja ciągów znaków</link>,
   lub
   <link linkend="language.operators.string">operator łączenia (konkatenacji) ciągów znaków</link>.
  </simpara>

  <simpara>
   W tym kontekście wartość będzie interpretowana jako <type>string</type>.
   Jeśli wartość nie może zostać zinterpretowana, zostanie rzucony <classname>TypeError</classname>.
   Przed PHP 7.4.0 zgłaszany był błąd o poziomie <constant>E_RECOVERABLE_ERROR</constant>.
  </simpara>
 </sect2>

 <sect2>
  <title>Konteksty logiczne</title>

  <simpara>
   Ten kontekst stosowany jest gdy używane są wyrażenia logiczne,
   <link linkend="language.operators.comparison.ternary">operator trójkowy</link>
   lub <link linkend="language.operators.logical">operator logiczny</link>.
  </simpara>

  <simpara>
   W tym kontekście wartość będzie interpretowana jako <type>bool</type>.
  </simpara>
 </sect2>

 <sect2>
  <title>Konteksty całkowite i ciągów znaków</title>

  <simpara>
   Ten kontekst stosowany jest, gdy używane są
   <link linkend="language.operators.bitwise">operatory przesunięć bitowych</link>.
  </simpara>

  <simpara>
   W tym kontekście, jeśli wszystkie operandy są typu <type>string</type>, to wynik
   także będzie typu <type>string</type>.
   W przeciwnym wypadku operandy będą interpretowane jako liczby całkowite (<type>int</type>)
   i wynik też będzie typu <type>int</type>.
   Od PHP 8.0.0 jeśli jeden z operandów nie może być zinterpretowany, to
   rzucany jest <classname>TypeError</classname>.
  </simpara>
 </sect2>

 <sect2>
  <title>Konteksty porównawcze</title>

  <simpara>
   Ten kontekst ma zastosowanie, gdy używany jest
   <link linkend="language.operators.comparison">operator porównania</link>.
  </simpara>

  <simpara>
   Konwersje typów zachodzące w tym kontekście są wyjaśnione w
   <link linkend="language.operators.comparison.types">tabeli</link>
   porównań z różnymi typami.
  </simpara>
 </sect2>

 <sect2 xml:id="language.types.type-juggling.function">
  <title>Konteksty funkcji</title>

  <simpara>
   Ten kontekst ma zastosowanie, gdy wartość jest przekazywana do otypowanego parametru, właściwości
   lub zwracana z funkcji, która określa typ zwracanej wartości.
  </simpara>

  <para>
   W tym kontekście wartość musi być określonego typu.
   Istnieją dwa wyjątki, pierwszy z nich to: jeśli wartość jest typu
   <type>int</type> a zadeklarowanym typem jest <type>float</type>, to
   liczba całkowita jest konwertowana na zmiennoprzecinkową.
   Drugi wyjątek to: jeśli deklarowana wartość jest typu <emphasis>skalarnego</emphasis>,
   wartość jest konwertowalna na typ skalarny i włączony jest luźny tryb typowania
   (ustawienie domyślne), to wartość może być skonwertowana na akceptowalny typ skalarny.
   Czytaj dalej, aby zobaczyć opis tego zachowania.
  </para>

  <warning>
   <simpara>
    <link linkend="functions.internal">Funkcje wewnętrzne</link>
    domyślnie konwertują &null; na wartości skalarne,
    choć to zachowanie jest <emphasis>PRZESTARZAŁE</emphasis> od PHP 8.1.0.
   </simpara>
  </warning>

  <sect3 xml:id="language.types.type-juggling.function.simple">
   <title>Luźne typowanie z prostymi deklaracjami typów</title>
   <itemizedlist>
    <listitem>
     <simpara>
      deklaracja typu <type>bool</type>: wartość jest interpretowana jako <type>bool</type>.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      deklaracja typu <type>int</type>: wartość jest interpretowana jako <type>int</type>,
      jeżeli konwersja jest jasno określona. Na przykład ciąg znaków jest
      <link linkend="language.types.numeric-strings">numeryczny</link>.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      deklaracja typu <type>float</type>: wartość jest interpretowana jako <type>float</type>,
      jeżeli konwersja jest jasno określona. Na przykład ciąg znaków jest
      <link linkend="language.types.numeric-strings">numeryczny</link>.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      deklaracja typu <type>string</type>: wartość jest interpretowana jako <type>string</type>.
     </simpara>
    </listitem>
   </itemizedlist>
  </sect3>

  <sect3 xml:id="language.types.type-juggling.function.union">
   <title>Luźne typowanie z uniami typów</title>
   <para>
    Kiedy ścisłe typowanie (<literal>strict_types</literal>) nie jest włączone, to deklaracje typów skalarnych
    podlegają ograniczonemu niejawnemu dopasowywaniu typów.
    Jeżeli dokładny typ wartości nie jest częścią unii typów, to docelowy typ
    jest wybierany w następującej kolejności:

    <orderedlist>
     <listitem>
      <simpara>
       <type>int</type>
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <type>float</type>
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <type>string</type>
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <type>bool</type>
      </simpara>
     </listitem>
    </orderedlist>

    Jeżeli typ istnieje w uni i wartość może być dopasowana do
    typu w ramach istniejącej semantyki sprawdzania typów w PHP, to wybierany jest ten typ.
    W przeciwnym razie podejmowana jest próba dopasowania dla kolejnego typu.
   </para>

   <caution>
    <para>
     Wyjątkiem jest, gdy wartość jest ciągiem znaków, a częścią unii jest zarówno int, jak i float.
     Preferowany typ jest określany zgodnie z istniejącą semantyką
     <link linkend="language.types.numeric-strings">numerycznych ciągów znaków</link>.
     Na przykład dla <literal>"42"</literal> wybierany jest typ <type>int</type>,
     a dla <literal>"42.0"</literal> typ <type>float</type>.
    </para>
   </caution>

   <note>
    <para>
     Typy które nie są częścią powyższej listy, nie podlegają
     niejawnemu dopasowaniu. W szczególności nie występuje niejawne dopasowanie do
     typów <type>null</type>, <type>false</type> ani <type>true</type>.
    </para>
   </note>

   <example>
    <title>Przykład typów dopasowywanych do typu będącego częścią unii</title>
    <programlisting>
<![CDATA[
<?php
// int|string
42    --> 42          // dokładny typ
"42"  --> "42"        // dokładny typ
new ObjectWithToString --> "Wynik __toString()"
                      // obiekt nigdy nie jest kompatybilny z typem, obsłuż jako string
42.0  --> 42          // float kompatybilny z int
42.1  --> 42          // float kompatybilny z int
1e100 --> "1.0E+100"  // float zbyt duży na typ int, obsłuż jako string
INF   --> "INF"       // float zbyt duży na typ int, obsłuż jako string
true  --> 1           // wartość logiczna (bool) kompatybilna z typem int
[]    --> TypeError   // tablica nie jest kompatybilna z typem int ani string

// int|float|bool
"45"    --> 45        // ciąg numeryczny typu dla liczby całkowitej
"45.0"  --> 45.0      // ciąg numeryczny dla wartości zmiennoprzecinkowej

"45X"   --> true      // nie jest ciągiem numerycznym, obsłuż jako bool
""      --> false     // nie jest ciągiem numerycznym, obsłuż jako bool
"X"     --> true      // nie jest ciągiem numerycznym, obsłuż jako bool
[]      --> TypeError // tablica nie jest kompatybilna z typami int, float ani bool
?>
]]>
    </programlisting>
   </example>
  </sect3>

 </sect2>

 <sect2 xml:id="language.types.typecasting">
  <title>Rzutowanie typów</title>

  <simpara>
   Rzutowanie typów konwertuje wartość na podany typ przy pomocy zapisania typu w
   nawiasach przed wartością do skonwertowania.
  </simpara>

  <example>
   <title>Rzutowanie typów</title>
   <programlisting role="php">
<![CDATA[
<?php
$foo = 10;          // $foo jest liczbą całkowitą
$bar = (bool) $foo; // $bar jest wartością logiczną
?>
]]>
   </programlisting>
  </example>

  <simpara>
   Dozwolone rzutowania to:
  </simpara>

  <simplelist>
   <member><literal>(int)</literal> - rzutowanie na <type>int</type></member>
   <member><literal>(bool)</literal> - rzutowanie na <type>bool</type></member>
   <member><literal>(float)</literal> - rzutowanie na <type>float</type></member>
   <member><literal>(string)</literal> - rzutowanie na <type>string</type></member>
   <member><literal>(array)</literal> - rzutowanie na <type>array</type></member>
   <member><literal>(object)</literal> - rzutowanie na <type>object</type></member>
   <member><literal>(unset)</literal> - rzutowanie na <type>NULL</type></member>
  </simplelist>

  <note>
   <para>
    <literal>(integer)</literal> jest aliasem rzutowania <literal>(int)</literal>.
    <literal>(boolean)</literal> jest aliasem rzutowania <literal>(bool)</literal>.
    <literal>(binary)</literal> jest aliasem rzutowania <literal>(string)</literal>.
    <literal>(double)</literal> i <literal>(real)</literal> są aliasami
    rzutowania <literal>(float)</literal>.
    Te rzutowania nie używają głównej nazwy typu i nie są rekomendowane.
   </para>
  </note>

  <warning>
   <simpara>
    Alias rzutowania <literal>(real)</literal> jest przestarzały od PHP 8.0.0.
   </simpara>
  </warning>

  <warning>
   <simpara>
    Rzutowanie <literal>(unset)</literal> jest przestarzałe od PHP 7.2.0.
    Zauważ, że rzutowanie <literal>(unset)</literal> działa tak samo jak przypisanie
    wartości <type>NULL</type> do zmiennej lub wywołania.
    Rzutowanie <literal>(unset)</literal> zostało usunięte w PHP 8.0.0.
   </simpara>
  </warning>

  <caution>
   <simpara>
    Rzutowanie <literal>(binary)</literal> oraz prefiks <literal>b</literal> istnieją,
    aby zapewnić obsługę w przyszłości Obecnie <literal>(binary)</literal> i
    <literal>(string)</literal> działają identycznie, ale może się to zmienić
    i nie powinno się na tym polegać.
   </simpara>
  </caution>

  <note>
   <para>
    Białe znaki są ignorowane w nawiasach określających rzutowanie typu.
    W związku z tym następujące dwa rzutowania działają identycznie:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$foo = (int) $bar;
$foo = ( int ) $bar;
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </note>

  <informalexample>
   <simpara>
    Rzutowanie wartości <type>string</type> i zmiennych na ciągi
    binarne:
   </simpara>

   <programlisting role="php">
<![CDATA[
<?php
$binary = (binary) $string;
$binary = b"binary string";
?>
]]>
   </programlisting>
  </informalexample>

  <!-- TODO Remove or move into string context section? -->
  <simpara>
   Zamiast rzutowania zmiennej na typ <type>string</type> możliwe jest też
   otoczenie jej cudzysłowami.
  </simpara>

  <example>
   <title>Różne mechanizmy rzutowania</title>
   <programlisting role="php">
<![CDATA[
<?php
$foo = 10;            // $foo jest liczbą całkowitą (typ int)
$str = "$foo";        // $str jest ciągiem znaków
$fst = (string) $foo; // $fst też jest ciągiem znaków

// Wyświetli "są identyczne"
if ($fst === $str) {
    echo "są identyczne", PHP_EOL;
}
?>
]]>
   </programlisting>
  </example>

  <para>
   Może nie być oczywiste co dokładnie stanie się, gdy nastąpi rzutowanie między pewnymi
   typami. Aby dowiedzieć się więcej, zobacz te sekcje:
   <simplelist>
    <member><link linkend="language.types.boolean.casting">Konwertowanie na wartość logiczną</link></member>
    <member><link linkend="language.types.integer.casting">Konwertowanie na liczbę całkowitą</link></member>
    <member><link linkend="language.types.float.casting">Konwertowanie na liczbę zmiennoprzecinkową</link></member>
    <member><link linkend="language.types.string.casting">Konwertowanie na ciąg znaków</link></member>
    <member><link linkend="language.types.array.casting">Konwertowanie do tablicy</link></member>
    <member><link linkend="language.types.object.casting">Konwertowanie do obiektu</link></member>
    <member><link linkend="language.types.resource.casting">Konwertowanie do zasobów</link></member>
    <member><link linkend="language.types.null.casting">Konwertowanie do NULL</link></member>
    <member><link linkend="types.comparisons">Tabele porównania typów</link></member>
   </simplelist>
  </para>

  <note>
   <simpara>
    Ponieważ PHP obsługuje indeksy na typie <type>string</type> jako przesunięcia,
    używając tej samej składni jak indeksy tablic, poniższy przykład
    jest prawdziwy we wszystkich wersjach PHP:
   </simpara>

   <example>
    <title>Użycie przesunięcia tablicy z ciągiem znaków</title>
    <programlisting role="php">
<![CDATA[
<?php
$a    = 'car'; // $a jest ciągiem znaków
$a[0] = 'b';   // $a wciąż jest ciągiem znaków
echo $a;       // bar
?>
]]>
    </programlisting>
   </example>

   <simpara>
    Przeczytaj rozdział <link linkend="language.types.string.substr">dostęp
    do pojedynczego znaku ciągu</link>, aby dowiedzieć się więcej.
   </simpara>
  </note>
 </sect2>

</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
