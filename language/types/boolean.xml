<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: e587d0655e426f97b3fcb431453da5030e743b23 Maintainer: sobak Status: ready -->
<sect1 xml:id="language.types.boolean">
 <title>Wartości logiczne</title>
 
 <simpara>
  Typ <type>bool</type> ma tylko dwie wartości i jest używany, aby wyrazić,
  czy coś jest prawdą. Może mieć wartość tylko &true; albo &false;.
 </simpara>

 <sect2 xml:id="language.types.boolean.syntax">
  <title>Składnia</title>
  <para>
   Aby określić wartość typu <type>bool</type> użyj stałych &true; lub
   &false;. Obie nie rozróżniają wielkości liter.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$foo = True; // przypisz wartość TRUE do $foo
?>
]]>
   </programlisting>
  </informalexample>

  <para>
   Zazwyczaj wynik <link linkend="language.operators">operatora</link>,
   który zwraca wartość logiczną jest przekazywany do
   <link linkend="language.control-structures">struktur kontrolnych</link>.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
// == to operator, który sprawdza
// równość i zwraca wartość logiczną
if ($action == "pokaz_wersje") {
    echo "Wersja to 1.23";
}

// taki zapis nie jest konieczny...
if ($show_separators == TRUE) {
    echo "<hr>\n";
}

// ...ponieważ można zapisać to w ten sposób:
if ($show_separators) {
    echo "<hr>\n";
}
?>
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="language.types.boolean.casting">
  <title>Konwersja na wartość logiczną</title>

  <simpara>
   Aby jawnie skonwertować wartość na typ <type>bool</type> użyj
   rzutowania <literal>(bool)</literal>. Zazwyczaj nie jest to niezbędne, ponieważ gdy
   wartość będzie użyta w kontekście logicznym, to zostanie automatycznie zinterpretowana
   jako wartość o typie <type>bool</type>. Aby dowiedzieć się więcej
   zobacz stronę poświęconą <link linkend="language.types.type-juggling">żonglowaniu typami</link>.
  </simpara>
   
  <para>
   Podczas konwersji na wartość logiczną następujące wartości są traktowane jak
   &false;:
  </para>
  
  <itemizedlist>
   <listitem>
    <simpara>
     typ <link linkend="language.types.boolean">boolean</link> &false; sam w sobie
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <link linkend="language.types.integer">liczba</link>
     <literal>0</literal> (zero)
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <link linkend="language.types.float">liczby zmiennoprzecinkowe</link>
     <literal>0.0</literal> i <literal>-0.0</literal> (zero)
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     pusty <link linkend="language.types.string">ciąg znaków</link> <literal>""</literal>,
     i <link linkend="language.types.string">ciąg znaków</link> <literal>"0"</literal>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <link linkend="language.types.array">tablica</link> z zerową liczbą elementów
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     typ <link linkend="language.types.null">NULL</link> (w tym
     usunięte zmienne)
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Wbudowane obiekty, które przeciążają ich zachowanie przy rzutowaniu na wartość logiczną.
     Na przykład obiekty <link linkend="ref.simplexml">SimpleXML</link>
     stworzone z pustych elementów bez atrybutów.
    </simpara>
   </listitem>
  </itemizedlist>
    
  <para>
   Każda inna wartość jest traktowana jako &true;
   (w tym <link linkend="language.types.resource">zasoby</link>
   oraz <constant>NAN</constant>).
  </para>
  
  <warning>
   <simpara>
    <literal>-1</literal> jest traktowane jak &true;, tak jak każda inna liczba
    różna od zera (ujemna czy dodatnia)!
   </simpara>
  </warning>

  <example>
   <title>Rzutowanie na boolean</title>
   <programlisting role="php">
<![CDATA[
<?php
var_dump((bool) "");        // bool(false)
var_dump((bool) "0");       // bool(false)
var_dump((bool) 1);         // bool(true)
var_dump((bool) -2);        // bool(true)
var_dump((bool) "foo");     // bool(true)
var_dump((bool) 2.3e5);     // bool(true)
var_dump((bool) array(12)); // bool(true)
var_dump((bool) array());   // bool(false)
var_dump((bool) "false");   // bool(true)
?>
]]>
   </programlisting>
  </example>

 </sect2>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
