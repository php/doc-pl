<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 6c71b05df89358d7760a4740ed3fcfa1682eadb6 Maintainer: grzesiek Status: ready -->
<!-- $Revision$ -->

<sect1 xml:id="control-structures.match" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>match</title>
 <?phpdoc print-version-for="match"?>
 <para>
  Wyrażenie <literal>match</literal> rozgałęzia ocenę na podstawie sprawdzenia
  identtyczności wartości.
  Podobnie jak instrukcja <literal>switch</literal>, wyrażenie
  <literal>match</literal> ma wyrażenie tematyczne, które jest
  porównywane z wieloma alternatywami. W przeciwieństwie do <literal>switch</literal>,
  będzie ono oceniać wartość podobnie jak wyrażenia trójargumentowe.
  W przeciwieństwie do <literal>switch</literal>, porównanie jest kontrolą identtyczności
  (<code>===</code>),a nie słabą kontrolą równości (<code>==</code>).
  Wyrażenia match są dostępne od PHP 8.0.0.
 </para>

 <example>
  <title>Struktura wyrażenia <literal>match</literal></title>
  <programlisting role="php">
<![CDATA[
<?php
$return_value = match (subject_expression) {
    single_conditional_expression => return_expression,
    conditional_expression1, conditional_expression2 => return_expression,
};
?>
]]>
  </programlisting>
  
  <example>
   <title>Podstawowe użycie <literal>match</literal></title>
    <programlisting role="php">
<![CDATA[
<?php
$food = 'cake';

$return_value = match ($food) {
    'apple' => 'This food is an apple',
    'bar' => 'This food is a bar',
    'cake' => 'This food is a cake',
};

var_dump($return_value);
?>
]]>
  </programlisting>
  &example.outputs;
   <screen>
<![CDATA[
string(19) "This food is a cake"
]]>
   </screen>
  </example>

  <example>
   <title>Przykład użycia <literal>match</literal> z operatorami porównania</title>
    <programlisting role="php">
<![CDATA[
<?php
$age = 18;

$output = match (true) {
    $age < 2 => "Baby",
    $age < 13 => "Child",
    $age <= 19 => "Teenager",
    $age > 19 => "Young adult",
    $age >= 40 => "Old adult"
};

var_dump($output);
?>
]]>
  </programlisting>
  &example.outputs;
   <screen>
<![CDATA[
string(8) "Teenager"
]]>
   </screen>
  </example>

  <note>
   <simpara>
    Wynik wyrażenia <literal>match</literal> nie musi być wykorzystany.
   </simpara>
  </note>
  <note>
   <simpara>
    Wyrażenie <literal>match</literal> <emphasis>musi</emphasis> być
    zakończone średnikiem <literal>;</literal>.
   </simpara>
  </note>
 </example>

 <para>
  Wyrażenie <literal>match</literal> jest podobne do instrukcji
  <literal>switch</literal>, ale ma kilka kluczowych różnic:
  
  <itemizedlist>
   <listitem>
    <simpara>
     Ramię <literal>match</literal> porównuje wartości ściśle(<code>===</code>) zamiast
     luźno, jak ma to miejsce w przypadku instrukcji switch.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Wyrażenie <literal>match</literal> zwraca wartość.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Ramiona <literal>match</literal> nie przechodzą do późniejszych przypadków, tak jak
     w przypadku instrukcji <literal>switch</literal>.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Wyrażenie <literal>match</literal> musi być wyczerpujące.
    </simpara>
   </listitem>
  </itemizedlist>
 </para>

 <para>
  Podobnie jak instrukcje <literal>switch</literal>, wyrażenie <literal>match</literal>
  są wykonywane zgodnie z dopasowaniem ramienia po dopasowaniu ramienia.
  Na początku nie jest wykonywany żaden kod.
  Wyrażenia warunkowe są oceniane tylko wtedy, gdy wszystkie poprzednie wyrażenia
  warunkowe nie pasowały do wyrażenia podmiotu.
  Oceniane będzie tylko wyrażenie zwrotne odpowiadające pasującemu
  wyrażeniu warunkowemu.
  Na przykład:
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$result = match ($x) {
    foo() => ...,
    $this->bar() => ..., // $this->bar() nie jest wywoływane, jeśli foo() === $x
    $this->baz => beep(), // beep() nie jest wywoływane, chyba że $x === $this->baz
    // etc.
};
?>
]]>
   </programlisting>
  </informalexample>
 </para>

 <para>
  Ramiona wyrażenia <literal>match</literal> mogą zawierać wiele wyrażeń
  rozdzielonych przecinkiem.  Jest to logiczne LUB i jest skrótem dla wielu
  ramion dopasowania z tą samą prawą stroną.
 </para>
 <para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$result = match ($x) {
    // To ramię porównania:
    $a, $b, $c => 5,
    // Jest odpowiednikiem tych trzech ramion porównania:
    $a => 5,
    $b => 5,
    $c => 5,
};
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <para>
  Szczególnym przypadkiem jest wzorzec <literal>default</literal>.
  Ten wzorzec pasuje do wszystkiego, co nie było wcześniej dopasowane.
  Na przykład:
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$expressionResult = match ($condition) {
    1, 2 => foo(),
    3, 4 => bar(),
    default => baz(),
};
?>
]]>
   </programlisting>
  </informalexample>
  <note>
   <simpara>
    Wielokrotne wzorce default spowodują
    błąd <constant>E_FATAL_ERROR</constant>.
   </simpara>
  </note>
 </para>

 <para>
  Wyrażenie <literal>match</literal> musi być wyczerpujące. Jeśli
  przedmiotowe wyrażenie nie jest obsługiwane przez żadne ramię dopasowania,
  zgłaszany jest błąd <classname>UnhandledMatchError</classname>.
 </para>

 <example>
  <title>Przykład nieobsłużonego wyrażenia dopasowania</title>
  <programlisting role="php">
<![CDATA[
<?php
$condition = 5;

try {
    match ($condition) {
        1, 2 => foo(),
        3, 4 => bar(),
    };
} catch (\UnhandledMatchError $e) {
    var_dump($e);
}
?>
]]>
  </programlisting>
  &example.outputs;
  <screen>
<![CDATA[
object(UnhandledMatchError)#1 (7) {
  ["message":protected]=>
  string(33) "Unhandled match value of type int"
  ["string":"Error":private]=>
  string(0) ""
  ["code":protected]=>
  int(0)
  ["file":protected]=>
  string(9) "/in/ICgGK"
  ["line":protected]=>
  int(6)
  ["trace":"Error":private]=>
  array(0) {
  }
  ["previous":"Error":private]=>
  NULL
}
]]>
  </screen>
 </example>

 <sect2>
  <title>Uzycie wyrażen match do obsługi sprawdzenia nieidentyczności</title>
  <para>
   Możliwe jest użycie wyrażenia <literal>match</literal> do obsługi
   przypadków warunkowych nieidentyczności używając <code>true</code> jako
   przedmiotowe wyrażenie.
  </para>

  <example>
   <title>Użycie uogólnionych wyrażeń match do rozgałęzienia w zakresach liczb całkowitych</title>
   <programlisting role="php">
<![CDATA[
<?php

$age = 23;

$result = match (true) {
    $age >= 65 => 'senior',
    $age >= 25 => 'adult',
    $age >= 18 => 'young adult',
    default => 'kid',
};

var_dump($result);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
string(11) "young adult"
]]>
   </screen>
  </example>

  <example>
   <title>Użycie uogólnionych wyrażeń match do rozgałęzienia na zawartości ciągu znaków</title>
   <programlisting role="php">
<![CDATA[
<?php

$text = 'Bienvenue chez nous';

$result = match (true) {
    str_contains($text, 'Welcome') || str_contains($text, 'Hello') => 'en',
    str_contains($text, 'Bienvenue') || str_contains($text, 'Bonjour') => 'fr',
    // ...
};

var_dump($result);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
string(2) "fr"
]]>
   </screen>
  </example>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
