<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 7104ee97ced1768a3231588dfc0bc0d7eb1117ad Maintainer: grzesiek Status: ready -->
<!-- $Revision$ -->

<sect1 xml:id="control-structures.while" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>while</title>
 <?phpdoc print-version-for="while"?>
 <para>
  Pętle <literal>while</literal> są najprostszym typem pętli w PHP.
  Zachowują się one tak samo jak ich odpowiedniki w języku C.
  Podstawową formą instrukcji <literal>while</literal> jest:
  <informalexample>
   <programlisting>
<![CDATA[
while (expr)
    statement
]]>
   </programlisting>
  </informalexample>
 </para>
 <simpara>
  Znaczenie instrukcji <literal>while</literal> jest proste.  Nakazuje
  ona PHP wielokrotne wykonywanie zagnieżdżonych instrukcji tak długo,
  jak długo wyrażenie <literal>while</literal> będzie miało wartość
  &true;.  Wartość wyrażenia jest sprawdzana za każdym razem na początku
  pętli, więc nawet jeśli wartość ta zmieni się podczas wykonywania
  zagnieżdżonych instrukcji, wykonywanie nie zostanie zatrzymane aż do
  końca iteracji (każde uruchomienie instrukcji w pętli przez PHP jest 
  jedną iteracją). Jeśli wyrażenie
  <literal>while</literal> ma wartość
  &false; od samego początku, zagnieżdżone
  instrukcje nie zostaną uruchomione ani razu.
 </simpara>
 <para>
  Podobnie jak w przypadku instrukcji <literal>if</literal> można grupować wiele
  instrukcji w tej samej pętli <literal>while</literal>
  otaczając grupę instrukcji nawiasami klamrowymi
  lub używając alternatywnej składni:
  <informalexample>
   <programlisting>
<![CDATA[
while (expr):
    statement
    ...
endwhile;
]]>
   </programlisting>
  </informalexample>
 </para>
 <para>
  Poniższe przykłady są identyczne i oba drukują liczby
  od 1 do 10:
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
/* przykład 1 */

$i = 1;
while ($i <= 10) {
    echo $i++;  /* drukowaną wartością będzie
                   $i przed inkrementacją
                   (post-inkrementacją) */
}

/* przykład 2 */

$i = 1;
while ($i <= 10):
    echo $i;
    $i++;
endwhile;
?>
]]>
   </programlisting>
  </informalexample>
 </para>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
