<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 2c3698ad6f5bd147301df8c49a3dda2dad9b04a6 Maintainer: sobak Status: ready -->
<!-- $Revision$ -->

<sect1 xml:id="control-structures.for" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title><literal>for</literal></title>
 <?phpdoc print-version-for="for"?>
 <para>
  Pętle <literal>for</literal> są najbardziej złożonymi pętlami w PHP.
  Zachowuja się jak jej odpowiedniki w C. Składnią pętli
  <literal>for</literal> jest:
  <informalexample>
   <programlisting>
<![CDATA[
for (wyrażenie1; wyrażenie2; wyrażenie3)
    statement
]]>
   </programlisting>
  </informalexample>
 </para>
 <simpara>
  Pierwsze wyrażenie (<varname>wyrażenie1</varname>) jest
  przatwarzane (wykonywane) jeden raz na początku
  pętli.
 </simpara>
 <simpara>
  Na początku każdej iteracji jest wykonywane
  <varname>wyrażenie2</varname>. Jeżeli zwraca ono
  &true;, to pętla jest kontynuowana, a zagnieżdżone w
  niej instrukcje są wykonywane. Jeżeli wynikiem tego wyrażenia
  jest &false;, wykonywanie pętli zostaje zakończone.
 </simpara>
 <simpara>
  Na końcu każdej iteracji wykonywane jest <varname>wyrażenie3</varname>.
 </simpara>
 <simpara>
  Każde z wyrażeń może być puste lub zawierać wiele wyrażeń
  oddzielonych przecinkami. W <varname>wyrażeniu2</varname> wszystkie
  operacje oddzielone przecinkiem są wykonywane, ale wynik jest brany
  z ostatniej części.
  Puste <varname>wyrażenie2</varname> oznacza, że pętla powinna być
  wykonywana bez końca (PHP rozumie to tak jak
  &true;, jak w C). To może nie być tak bezużyteczne, jak mogłeś
  pomyśleć, ponieważ często możesz chcieć zakończyć pętlę
  używając wyrażenia <link
  linkend="control-structures.break"><literal>break</literal></link>
  zamiast sprawdzania prawdziwości wyrażenia <literal>for</literal>.
 </simpara>
 <para>
  Spójrz na poniższe przykłady. Wszystkie wyświetlają liczby od
  1 do 10:
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
/* przykład 1 */

for ($i = 1; $i <= 10; $i++) {
    echo $i;
}

/* przykład 2 */

for ($i = 1; ; $i++) {
    if ($i > 10) {
        break;
    }
    echo $i;
}

/* przykład 3 */

$i = 1;
for (; ; ) {
    if ($i > 10) {
        break;
    }
    echo $i;
    $i++;
}

/* przykład 4 */

for ($i = 1, $j = 0; $i <= 10; $j += $i, print $i, $i++);
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <simpara>
  Oczywiście pierwszy przykład wydaje się najlepszy (lub
  ewentualnie czwarty), ale można zobaczyć, że możliwość użycia
  pustych wyrażeń w <literal>for</literal> jest przydatne w
  niektórych sytuacjach.
 </simpara>
 <para>
  PHP wspiera także alternatywną składnię z dwukropkiem dla
  pętli <literal>for</literal>.
  <informalexample>
   <programlisting>
<![CDATA[
for (wyrażenie1; wyrażenie2; wyrażenie3):
    operacja
    ...
endfor;
]]>
   </programlisting>
  </informalexample>
 </para>
 <simpara>
  Często użytkownicy iterują przez całą tablicę, jak w
  przykładzie poniżej.
 </simpara>
 <para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
/*
 * Tablica z danymi do zmodyfikowania
 * w czasie uruchamiania pętli.
 */
$ludzie = array(
    array('imie' => 'Kalle', 'salt' => 856412),
    array('imie' => 'Pierre', 'salt' => 215863)
);

for($i = 0; $i < count($ludzie); ++$i) {
    $ludzie[$i]['sol'] = mt_rand(000000, 999999);
}
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <simpara>
  Powyższy kod może być wolny, ponieważ rozmiar tablicy jest pobierany
  przy każdej iteracji. Ponieważ rozmiar tablicy nigdy się nie zmienia, pętla
  może być łatwo zoptymalizowana dzięki użyciu wewnętrznej zmiennej do zapisania
  rozmiaru, zamiast ciągłego wykonywania <function>count</function>:
 </simpara>
 <para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$ludzie = array(
    array('imie' => 'Kalle', 'sol' => 856412),
    array('imie' => 'Pierre', 'sol' => 215863)
);

for($i = 0, $rozmiar = count($ludzie); $i < $rozmiar; ++$i) {
    $ludzie[$i]['sol'] = mt_rand(000000, 999999);
}
?>
]]>
   </programlisting>
  </informalexample>
 </para>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
