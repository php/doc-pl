<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 75fb719c3c051fdd62a704bc110197edcba8f532 Maintainer: sobak Status: ready -->
<!-- $Revision$ -->

<sect1 xml:id="control-structures.foreach" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title><literal>foreach</literal></title>
 <?phpdoc print-version-for="foreach"?>
 <para>
  Konstrukcja <literal>foreach</literal> umożliwia łatwy sposób do
  iterowania tablic. <literal>foreach</literal> działa tylko na tablicach
  i obiektach, i zgłosi błąd, jeżeli spróbujesz użyć go na zmiennej
  z innym typem danych lub na niezinicjalizowanej zmiennej. Dostępne są
  dwie składnie:
  <informalexample>
   <programlisting>
<![CDATA[
foreach (wyrażenie_tablicy as $wartość)
    statement
foreach (wyrażenie_tablicy as $klucz => $wartość)
    statement
]]>
   </programlisting>
  </informalexample>
 </para>
 <simpara>
  Pierwsza forma przechodzi przez tablicę podaną jako
  <literal>wyrażenie_tablicy</literal>. Przy każdej iteracji, wartość
  obecnego elementu jest przypisywana do zmiennej <literal>$wartość</literal>, a
  wewnętrzny wskaźnik tablicy jest zwiększany o jeden (tak więc przy następnej
  iteracji, w zmiennej znajdzie się kolejny element).
 </simpara>
 <simpara>
  Druga forma dodatkowo przypisze klucz aktualnego elementu
  do zmiennej <literal>$klucz</literal> przy każdej iteracji.
 </simpara>
 <simpara>
  Jest możliwe
  <link linkend="language.oop5.iterations">dostosowywanie iteracji obiektów</link>.
 </simpara>
 <para>
  <note>
   <para>
    W PHP 5, kiedy rozpoczyna się wykonywanie <literal>foreach</literal>,
    wewnętrzny wskaźnik tablicy jest automatycznie resetowany do pierwszego elementu
    tablicy. Oznacza to, że nie musisz wykonywać funkcji
    <function>reset</function> przed pętlą <literal>foreach</literal>.
   </para>
   <para>
    Jako że w PHP 5 <literal>foreach</literal> korzysta z wewnętrznego wskaźnika tablicy, jego
    zmiana wewnątrz pętli może prowadzić do nieoczekiwanych wyników.
   </para>
   <para>
    W PHP 7 <literal>foreach</literal> nie korzysta z wewnętrznego wskaźnika tablicy.
   </para>
  </note>
 </para>
 <para>
  Aby być w stanie bezpośrednio modyfikować elementy tablicy w pęli, poprzedź
 <literal>$wartość</literal> znakiem &amp;. W tym wypadku wartość zostanie przypisana
 <link linkend="language.references">przez referencję</link>.
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$arr = array(1, 2, 3, 4);
foreach ($arr as &$value) {
    $value = $value * 2;
}
// $arr to teraz array(2, 4, 6, 8)
unset($value); // usuwa referencję do ostatniego elementu
?>
]]>
   </programlisting>
  </informalexample>
 </para>

 <warning>
  <para>
   Referencja zmiennej <literal>$value</literal> do ostatniego elementu tablicy
   jest obecna nawet po zakończeniu pętli <literal>foreach</literal>. Zaleca się
   jej usunięcie przy użyciu <function>unset</function>.
   W przeciwnym wypadku napotka się na następujące zachowanie:
  </para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$arr = array(1, 2, 3, 4);
foreach ($arr as &$value) {
    $value = $value * 2;
}
// $arr to teraz array(2, 4, 6, 8)

// bez wywołania unset($value), $value wciąż odwołuje się do ostatniego elementu: $arr[3]

foreach ($arr as $key => $value) {
    // $arr[3] zostanie zaktualizowane z każdą wartością z $arr...
    echo "{$key} => {$value} ";
    print_r($arr);
}
// ...do momentu gdy wartość druga do ostatniej będzie skopiowana na ostatnią wartość

// wynik:
// 0 => 2 Array ( [0] => 2, [1] => 4, [2] => 6, [3] => 2 )
// 1 => 4 Array ( [0] => 2, [1] => 4, [2] => 6, [3] => 4 )
// 2 => 6 Array ( [0] => 2, [1] => 4, [2] => 6, [3] => 6 )
// 3 => 6 Array ( [0] => 2, [1] => 4, [2] => 6, [3] => 6 )
?>
]]>
   </programlisting>
  </informalexample>
 </warning>
 <para>
  Przed wersją PHP 5.5.0 referencja zmiennej <literal>$wartość</literal> jest możliwa tylko jeśli iterowana tablica 
  może być zreferencjonowana (np. jeżeli jest zmienną). Poniższy kod nie zadziała:
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
foreach (array(1, 2, 3, 4) as &$value) {
    $value = $value * 2;
}
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <para>
  <note>
   <para>
    <literal>foreach</literal> nie wspiera tłumienia
    wiadomości błędów przez '@'.
   </para>
  </note>
 </para>
 <para>
  Więcej przykładów demonstrujących użycie:
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
/* foreach - przykład 1: tylko wartość */

$a = array(1, 2, 3, 17);

foreach ($a as $v) {
    echo "Obecna wartość \$a: $v.\n";
}

/* foreach - przykład 2: wartość (z ręczną notacją dostępu dla zilustrowania) */

$a = array(1, 2, 3, 17);

$i = 0; /* tylko dla zilustrowania przykładu */

foreach ($a as $v) {
    echo "\$a[$i] => $v.\n";
    $i++;
}

/* foreach - przykład 3: klucz i wartość */

$a = array(
    "raz" => 1,
    "dwa" => 2,
    "trzy" => 3,
    "siedemnascie" => 17
);

foreach ($a as $k => $v) {
    echo "\$a[$k] => $v.\n";
}

/* foreach - przykład 4: tablice wielowymiarowe */
$a = array();
$a[0][0] = "a";
$a[0][1] = "b";
$a[1][0] = "y";
$a[1][1] = "z";

foreach ($a as $v1) {
    foreach ($v1 as $v2) {
        echo "$v2\n";
    }
}

/* foreach - przykład 5: tablice dynamiczne */

foreach (array(1, 2, 3, 4, 5) as $v) {
    echo "$v\n";
}
?>
]]>
   </programlisting>
  </informalexample>
 </para>

 <sect2 xml:id="control-structures.foreach.list">
  <title>Rozpakowywanie zagnieżdżonych tablic używając list()</title>
  <?phpdoc print-version-for="foreach.list"?>

  <para>
   PHP 5.5 dodało możliwość iterowania przez tablicę z tablicami i rozpakowania
   zagnieżdżonych tablic do zmiennych pętli przy użyciu <function>list</function>
   jako wartości.
  </para>

  <para>
   Przykład:

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$array = [
    [1, 2],
    [3, 4],
];

foreach ($array as list($a, $b)) {
    // $a zawiera pierwszy element zagnieżdżonej tablicy,
    // a $b zawiera drugi element.
    echo "A: $a; B: $b\n";
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
A: 1; B: 2
A: 3; B: 4
]]>
    </screen>
   </informalexample>
  </para>

  <para>
   Można przekazać mniej argumentów do <function>list</function>, niż jest
   w zagnieżdżonej tablicy. W tym wypadku pozostałe wartości tablicy będą
   ignorowane:

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$array = [
    [1, 2],
    [3, 4],
];

foreach ($array as list($a)) {
    // Zauważ, że nie ma tu $b.
    echo "$a\n";
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
1
3
]]>
    </screen>
   </informalexample>
  </para>

  <para>
   Zostanie wygenerowany komunikat, jeżeli nie ma wystarczającej ilości elementów
   tablicy, aby wypełnić <function>list</function>:

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$array = [
    [1, 2],
    [3, 4],
];

foreach ($array as list($a, $b, $c)) {
    echo "A: $a; B: $b; C: $c\n";
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[

Notice: Undefined offset: 2 in example.php on line 7
A: 1; B: 2; C: 

Notice: Undefined offset: 2 in example.php on line 7
A: 3; B: 4; C: 
]]>
    </screen>
   </informalexample>
  </para>
 </sect2>

 <sect2 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>7.0.0</entry>
       <entry>
        <literal>foreach</literal> nie korzysta więcej z wewnętrznego wskaźnika tablicy.
       </entry>
      </row>
      <row>
       <entry>5.5.0</entry>
       <entry>
        Wspierana jest referencja <literal>$wartości</literal> dla wyrażeń.
        Wcześniej były wspierane tylko zmienne.
       </entry>
      </row>
      <row>
       <entry>5.5.0</entry>
       <entry>
        Wspierane jest rozpakowywanie zagnieżdżonych tablic przy użyciu <function>list</function>.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </sect2>

</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
