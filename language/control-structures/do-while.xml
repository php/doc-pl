<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: c7aca484fd1d7eaccd03f0e011f858fa93d105b9 Maintainer: sobak Status: ready -->
<!-- $Revision$ -->

<sect1 xml:id="control-structures.do.while" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title><literal>do-while</literal></title>
 <?phpdoc print-version-for="dowhile"?>
 <simpara>
  Pętle <literal>do-while</literal> są bardzo podobne do pętli
  <literal>while</literal>, z tą różnicą, że prawdziwość wyrażenia jest
  sprawdzana na końcu każdej iteracji, zamiast na poczatku.
  Główną różnicą w stosunku do zwykłych pętli <literal>while</literal>, jest
  to, że pierwsza iteracja <literal>do-while</literal> będzie
  zawsze wykonana (prawdziwość wyrażenia jest sprawdzana tylko na końcu
  iteracji), podczas gdy może nie zostać wykonana przy zwykłej
  pętli <literal>while</literal> (prawdziwość wyrażenia jest
  sprawdzana na początku każdej iteracji, jeżeli zwraca ona
  &false; od początku, to wykonanie pętli zakończy
  się natychmiast).
 </simpara>
 <para>
  Istnieje tylko jedna składnia dla pętli <literal>do-while</literal>:

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$i = 0;
do {
    echo $i;
} while ($i > 0);
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <simpara>
   Powyższa pętla wykona się dokładnie raz, ponieważ po pierwszej
   iteracji, gdy sprawdzana jest prawdziwość wyrażenia, zwróci ono
   &false; (<varname>$i</varname> nie jest większe niż 0) i wykonywanie
   pętli zostanie zakończone.
 </simpara>
 <para>
  Zaawansowani użytkownicy C mogą znać inne zastosowanie pętli
  <literal>do-while</literal>, które pozwala zatrzymać wykonywanie
  skryptu w środku bloków kou, przez umieszczenie ich w
  <literal>do-while</literal> (0), i użycie wyrażenia <link
  linkend="control-structures.break"><literal>break</literal></link>.
  Demonstruje to poniższy kod:
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
do {
    if ($i < 5) {
        echo "i nie jest wystarczająco duże";
        break;
    }
    $i *= $factor;
    if ($i < $minimum_limit) {
        break;
    }
   echo "i jest ok";

    /* przetwórz i */

} while (0);
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <simpara>
  Nie martw się, jeżeli jeszcze tego nie rozumiesz.
  Możesz pisać skrypty, a nawet potężne skrypt, nie używając tej
  'możliwości'.
  Od PHP 5.3.0, możliwe jest użycie operatora
  <link linkend="control-structures.goto"><literal>goto</literal></link>
  wewnątrz tego hacka.
 </simpara>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
