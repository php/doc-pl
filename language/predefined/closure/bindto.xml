<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 80720e59fc88b2522fe2e119b0148caaaa214b0b Maintainer: grzesiek Status: ready -->
<!-- $Revision$ -->
<refentry xml:id="closure.bindto" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Closure::bindTo</refname>
  <refpurpose>
   Duplikuje domknięcie z nowym powiązanym obiektem i zakresem klasy
  </refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="Closure">
   <modifier>public</modifier> <type class="union"><type>Closure</type><type>null</type></type><methodname>Closure::bindTo</methodname>
   <methodparam><type class="union"><type>object</type><type>null</type></type><parameter>newThis</parameter></methodparam>
   <methodparam choice="opt"><type class="union"><type>object</type><type>string</type><type>null</type></type><parameter>newScope</parameter><initializer>"static"</initializer></methodparam>
  </methodsynopsis>
  <para>
   Tworzy i zwraca nową <link linkend="functions.anonymous">funkcję
   anonimową</link> z tym samym ciałem i powiązanymi zmiennymi co ta,
   ale prawdopodobnie z innym powiązanym obiektem i nowym zakresem klasy.
  </para>

  <para>
   “Powiązany obiekt” określa wartość <literal>$this</literal> jaką
   będzie miało ciało funkcji, a “zakres klasy” reprezentuje klasę,
   która określa, do których prywatnych i chronionych członków anonimowa 
   funkcja będzie miała dostęp. Mianowicie, członkowie, którzy będą
   widoczni, są tacy sami, jak gdyby anonimowa funkcja była metodą
   klasy podanej jako wartość parametru <parameter>newScope</parameter>.
  </para>

  <para>
   Statyczne domknięcia nie mogą mieć żadnego powiązanego obiektu (wartość parametru
   <parameter>newThis</parameter> powinna mieć wartość &null;), ale mimo to metoda
   ta może być użyta do zmiany zakresu ich klasy.
  </para>

  <para>
   Ta metoda zapewni, że dla niestatycznego domknięcia, posiadanie powiązanej
   instancji będzie oznaczać zakresu i odwrotnie. W tym celu
   niestatyczne domknięcia, które mają zakres, ale instancję &null; są
   statyczne, a niestatyczne domknięcia bez zakresu, które mają instancję inną niż null
   są przypisywane do nieokreślonej klasy.
  </para>

  <note>
   <para>
    Jeśli chcesz zduplikować tylko anonimowe funkcje, możesz zamiast tego użyć
    <link linkend="language.oop5.cloning">klonowania</link>.
   </para>
  </note>

 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>newThis</parameter></term>
    <listitem>
     <para>
      Obiekt, z którym dana funkcja anonimowa powinna być powiązana lub
      &null; dla domknięcia, które ma być niepowiązane.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>newScope</parameter></term>
    <listitem>
     <para>
      Zakres klasy, do której ma być przypisane domknięcie lub
      'static', aby zachować bieżący. eśli podano obiekt, zamiast tego zostanie
      użyty typ obiektu. Określa on widoczność chronionych
      i prywatnych metod powiązanego obiektu.
      Niedozwolone jest przekazywanie (obiektu) klasy wewnętrznej jako tego parametru.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Zwraca nowo utworzony obiekt <classname>Closure</classname>
   lub &null; przy niepowodzeniu.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Przyład <function>Closure::bindTo</function></title>
   <programlisting role="php">
<![CDATA[
<?php

class A
{
    private $val;

    public function __construct($val)
    {
        $this->val = $val;
    }

    public function getClosure()
    {
        // Zwraca domknięcie powiązane z tym obiektem i zakresem
        return function() {
            return $this->val;
        };
    }
}

$ob1 = new A(1);
$ob2 = new A(2);

$cl = $ob1->getClosure();
echo $cl(), "\n";

$cl = $cl->bindTo($ob2);
echo $cl(), "\n";

?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
1
2
]]>
   </screen>
  </example>
 </refsect1>


 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><link linkend="functions.anonymous">Funkcje anonimowe</link></member>
   <member><methodname>Closure::bind</methodname></member>
  </simplelist>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
